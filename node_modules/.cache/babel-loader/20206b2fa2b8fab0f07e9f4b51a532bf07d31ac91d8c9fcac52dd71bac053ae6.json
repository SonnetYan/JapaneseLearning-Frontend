{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { vocabularyService } from '../services/api';\nexport default {\n  name: 'VocabularyForm',\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  data() {\n    return {\n      isEditing: false,\n      form: {\n        kanji: '',\n        kana: '',\n        meaning: '',\n        examples: [{\n          japanese: '',\n          english: ''\n        }],\n        tags: []\n      },\n      tagsInput: '',\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    if (this.id) {\n      this.isEditing = true;\n      this.fetchVocabulary();\n    }\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getById(this.id);\n        const vocabulary = response.data;\n        this.form = {\n          kanji: vocabulary.kanji || '',\n          kana: vocabulary.kana,\n          meaning: vocabulary.meaning,\n          examples: vocabulary.examples.length ? vocabulary.examples : [{\n            japanese: '',\n            english: ''\n          }],\n          tags: vocabulary.tags || []\n        };\n        this.tagsInput = this.form.tags.join(', ');\n      } catch (error) {\n        this.error = 'Error fetching vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    addExample() {\n      this.form.examples.push({\n        japanese: '',\n        english: ''\n      });\n    },\n    removeExample(index) {\n      this.form.examples.splice(index, 1);\n\n      // Always keep at least one example\n      if (this.form.examples.length === 0) {\n        this.form.examples.push({\n          japanese: '',\n          english: ''\n        });\n      }\n    },\n    async submitForm() {\n      this.loading = true;\n\n      // Process tags\n      this.form.tags = this.tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);\n      try {\n        if (this.isEditing) {\n          await vocabularyService.update(this.id, this.form);\n        } else {\n          await vocabularyService.create(this.form);\n          this.resetForm();\n        }\n        this.$router.push('/vocabulary');\n      } catch (error) {\n        this.error = 'Error saving vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    resetForm() {\n      this.form = {\n        kanji: '',\n        kana: '',\n        meaning: '',\n        examples: [{\n          japanese: '',\n          english: ''\n        }],\n        tags: []\n      };\n      this.tagsInput = '';\n    },\n    cancel() {\n      this.$router.push('/vocabulary');\n    }\n  }\n};","map":{"version":3,"names":["vocabularyService","name","props","id","type","String","default","data","isEditing","form","kanji","kana","meaning","examples","japanese","english","tags","tagsInput","loading","error","created","fetchVocabulary","methods","response","getById","vocabulary","length","join","message","console","addExample","push","removeExample","index","splice","submitForm","split","map","tag","trim","filter","update","create","resetForm","$router","cancel"],"sources":["/Users/sonnet/Documents/4370 Web Programming/ai programming/japanese-learning-app/frontend/src/components/VocabularyForm.vue"],"sourcesContent":["<template>\n  <div class=\"vocabulary-form\">\n    <h2>{{ isEditing ? 'Edit' : 'Add' }} Vocabulary</h2>\n    \n    <form @submit.prevent=\"submitForm\">\n      <div class=\"form-group\">\n        <label for=\"kanji\">Kanji (Optional)</label>\n        <input \n          type=\"text\" \n          id=\"kanji\" \n          v-model=\"form.kanji\" \n          placeholder=\"Enter kanji\"\n        />\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"kana\">Kana (Required)</label>\n        <input \n          type=\"text\" \n          id=\"kana\" \n          v-model=\"form.kana\" \n          placeholder=\"Enter kana\" \n          required\n        />\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"meaning\">Meaning (Required)</label>\n        <input \n          type=\"text\" \n          id=\"meaning\" \n          v-model=\"form.meaning\" \n          placeholder=\"Enter meaning\" \n          required\n        />\n      </div>\n      \n      <h3>Example Sentences</h3>\n      <div v-for=\"(example, index) in form.examples\" :key=\"index\" class=\"example-item\">\n        <div class=\"form-group\">\n          <label :for=\"'japanese-' + index\">Japanese</label>\n          <input \n            type=\"text\" \n            :id=\"'japanese-' + index\" \n            v-model=\"example.japanese\" \n            placeholder=\"Enter example in Japanese\" \n            required\n          />\n        </div>\n        \n        <div class=\"form-group\">\n          <label :for=\"'english-' + index\">English</label>\n          <input \n            type=\"text\" \n            :id=\"'english-' + index\" \n            v-model=\"example.english\" \n            placeholder=\"Enter translation in English\"\n            required\n          />\n        </div>\n        \n        <button type=\"button\" class=\"remove-btn\" @click=\"removeExample(index)\">\n          Remove\n        </button>\n      </div>\n      \n      <button type=\"button\" class=\"add-example-btn\" @click=\"addExample\">\n        Add Example Sentence\n      </button>\n      \n      <div class=\"form-group\">\n        <label for=\"tags\">Tags (Comma separated)</label>\n        <input \n          type=\"text\" \n          id=\"tags\" \n          v-model=\"tagsInput\" \n          placeholder=\"Enter tags (e.g., noun, verb, JLPT N5)\" \n        />\n      </div>\n      \n      <div class=\"form-actions\">\n        <button type=\"submit\" class=\"submit-btn\">\n          {{ isEditing ? 'Update' : 'Add' }} Vocabulary\n        </button>\n        <button type=\"button\" class=\"cancel-btn\" @click=\"cancel\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { vocabularyService } from '../services/api';\n\nexport default {\n  name: 'VocabularyForm',\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  data() {\n    return {\n      isEditing: false,\n      form: {\n        kanji: '',\n        kana: '',\n        meaning: '',\n        examples: [{ japanese: '', english: '' }],\n        tags: []\n      },\n      tagsInput: '',\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    if (this.id) {\n      this.isEditing = true;\n      this.fetchVocabulary();\n    }\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getById(this.id);\n        const vocabulary = response.data;\n        \n        this.form = {\n          kanji: vocabulary.kanji || '',\n          kana: vocabulary.kana,\n          meaning: vocabulary.meaning,\n          examples: vocabulary.examples.length ? vocabulary.examples : [{ japanese: '', english: '' }],\n          tags: vocabulary.tags || []\n        };\n        \n        this.tagsInput = this.form.tags.join(', ');\n      } catch (error) {\n        this.error = 'Error fetching vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    addExample() {\n      this.form.examples.push({ japanese: '', english: '' });\n    },\n    removeExample(index) {\n      this.form.examples.splice(index, 1);\n      \n      // Always keep at least one example\n      if (this.form.examples.length === 0) {\n        this.form.examples.push({ japanese: '', english: '' });\n      }\n    },\n    async submitForm() {\n      this.loading = true;\n      \n      // Process tags\n      this.form.tags = this.tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);\n      \n      try {\n        if (this.isEditing) {\n          await vocabularyService.update(this.id, this.form);\n        } else {\n          await vocabularyService.create(this.form);\n          this.resetForm();\n        }\n        \n        this.$router.push('/vocabulary');\n      } catch (error) {\n        this.error = 'Error saving vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    resetForm() {\n      this.form = {\n        kanji: '',\n        kana: '',\n        meaning: '',\n        examples: [{ japanese: '', english: '' }],\n        tags: []\n      };\n      this.tagsInput = '';\n    },\n    cancel() {\n      this.$router.push('/vocabulary');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.vocabulary-form {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\ninput {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.example-item {\n  border: 1px solid #ddd;\n  padding: 15px;\n  margin-bottom: 15px;\n  border-radius: 4px;\n  position: relative;\n}\n\n.remove-btn {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: #f44336;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 5px 10px;\n  cursor: pointer;\n}\n\n.remove-btn:hover {\n  background-color: #d32f2f;\n}\n\n.add-example-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px;\n  margin-bottom: 20px;\n  cursor: pointer;\n  width: 100%;\n}\n\n.add-example-btn:hover {\n  background-color: #0b7dda;\n}\n\n.form-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.submit-btn, .cancel-btn {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.submit-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.submit-btn:hover {\n  background-color: #45a049;\n}\n\n.cancel-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.cancel-btn:hover {\n  background-color: #d32f2f;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}