{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"vocabulary-form\"\n};\nconst _hoisted_2 = {\n  class: \"form-group\"\n};\nconst _hoisted_3 = {\n  class: \"form-group\"\n};\nconst _hoisted_4 = {\n  class: \"form-group\"\n};\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\nconst _hoisted_6 = [\"for\"];\nconst _hoisted_7 = [\"id\", \"onUpdate:modelValue\"];\nconst _hoisted_8 = {\n  class: \"form-group\"\n};\nconst _hoisted_9 = [\"for\"];\nconst _hoisted_10 = [\"id\", \"onUpdate:modelValue\"];\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  class: \"form-group\"\n};\nconst _hoisted_13 = {\n  class: \"form-actions\"\n};\nconst _hoisted_14 = {\n  type: \"submit\",\n  class: \"submit-btn\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, _toDisplayString($data.isEditing ? 'Edit' : 'Add') + \" Vocabulary\", 1), _createElementVNode(\"form\", {\n    onSubmit: _cache[6] || (_cache[6] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"kanji\"\n  }, \"Kanji (Optional)\", -1)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"kanji\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.form.kanji = $event),\n    placeholder: \"Enter kanji\"\n  }, null, 512), [[_vModelText, $data.form.kanji]])]), _createElementVNode(\"div\", _hoisted_3, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"kana\"\n  }, \"Kana (Required)\", -1)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"kana\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.form.kana = $event),\n    placeholder: \"Enter kana\",\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.form.kana]])]), _createElementVNode(\"div\", _hoisted_4, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    for: \"meaning\"\n  }, \"Meaning (Required)\", -1)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"meaning\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.form.meaning = $event),\n    placeholder: \"Enter meaning\",\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.form.meaning]])]), _cache[11] || (_cache[11] = _createElementVNode(\"h3\", null, \"Example Sentences\", -1)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.form.examples, (example, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"example-item\"\n    }, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"label\", {\n      for: 'japanese-' + index\n    }, \"Japanese\", 8, _hoisted_6), _withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      id: 'japanese-' + index,\n      \"onUpdate:modelValue\": $event => example.japanese = $event,\n      placeholder: \"Enter example in Japanese\",\n      required: \"\"\n    }, null, 8, _hoisted_7), [[_vModelText, example.japanese]])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"label\", {\n      for: 'english-' + index\n    }, \"English\", 8, _hoisted_9), _withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      id: 'english-' + index,\n      \"onUpdate:modelValue\": $event => example.english = $event,\n      placeholder: \"Enter translation in English\",\n      required: \"\"\n    }, null, 8, _hoisted_10), [[_vModelText, example.english]])]), _createElementVNode(\"button\", {\n      type: \"button\",\n      class: \"remove-btn\",\n      onClick: $event => $options.removeExample(index)\n    }, \" Remove \", 8, _hoisted_11)]);\n  }), 128)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"add-example-btn\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.addExample && $options.addExample(...args))\n  }, \" Add Example Sentence \"), _createElementVNode(\"div\", _hoisted_12, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"tags\"\n  }, \"Tags (Comma separated)\", -1)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"tags\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.tagsInput = $event),\n    placeholder: \"Enter tags (e.g., noun, verb, JLPT N5)\"\n  }, null, 512), [[_vModelText, $data.tagsInput]])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", _hoisted_14, _toDisplayString($data.isEditing ? 'Update' : 'Add') + \" Vocabulary \", 1), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"cancel-btn\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.cancel && $options.cancel(...args))\n  }, \" Cancel \")])], 32)]);\n}","map":{"version":3,"names":["class","type","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$data","isEditing","onSubmit","_cache","_withModifiers","args","$options","submitForm","_hoisted_2","for","id","$event","form","kanji","placeholder","_hoisted_3","kana","required","_hoisted_4","meaning","_Fragment","_renderList","examples","example","index","key","_hoisted_5","_hoisted_6","japanese","_hoisted_7","_hoisted_8","_hoisted_9","english","_hoisted_10","onClick","removeExample","_hoisted_11","addExample","_hoisted_12","tagsInput","_hoisted_13","_hoisted_14","cancel"],"sources":["/Users/sonnet/Documents/4370 Web Programming/ai programming/japanese-learning-app/frontend/src/components/VocabularyForm.vue"],"sourcesContent":["<template>\n  <div class=\"vocabulary-form\">\n    <h2>{{ isEditing ? 'Edit' : 'Add' }} Vocabulary</h2>\n    \n    <form @submit.prevent=\"submitForm\">\n      <div class=\"form-group\">\n        <label for=\"kanji\">Kanji (Optional)</label>\n        <input \n          type=\"text\" \n          id=\"kanji\" \n          v-model=\"form.kanji\" \n          placeholder=\"Enter kanji\"\n        />\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"kana\">Kana (Required)</label>\n        <input \n          type=\"text\" \n          id=\"kana\" \n          v-model=\"form.kana\" \n          placeholder=\"Enter kana\" \n          required\n        />\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"meaning\">Meaning (Required)</label>\n        <input \n          type=\"text\" \n          id=\"meaning\" \n          v-model=\"form.meaning\" \n          placeholder=\"Enter meaning\" \n          required\n        />\n      </div>\n      \n      <h3>Example Sentences</h3>\n      <div v-for=\"(example, index) in form.examples\" :key=\"index\" class=\"example-item\">\n        <div class=\"form-group\">\n          <label :for=\"'japanese-' + index\">Japanese</label>\n          <input \n            type=\"text\" \n            :id=\"'japanese-' + index\" \n            v-model=\"example.japanese\" \n            placeholder=\"Enter example in Japanese\" \n            required\n          />\n        </div>\n        \n        <div class=\"form-group\">\n          <label :for=\"'english-' + index\">English</label>\n          <input \n            type=\"text\" \n            :id=\"'english-' + index\" \n            v-model=\"example.english\" \n            placeholder=\"Enter translation in English\"\n            required\n          />\n        </div>\n        \n        <button type=\"button\" class=\"remove-btn\" @click=\"removeExample(index)\">\n          Remove\n        </button>\n      </div>\n      \n      <button type=\"button\" class=\"add-example-btn\" @click=\"addExample\">\n        Add Example Sentence\n      </button>\n      \n      <div class=\"form-group\">\n        <label for=\"tags\">Tags (Comma separated)</label>\n        <input \n          type=\"text\" \n          id=\"tags\" \n          v-model=\"tagsInput\" \n          placeholder=\"Enter tags (e.g., noun, verb, JLPT N5)\" \n        />\n      </div>\n      \n      <div class=\"form-actions\">\n        <button type=\"submit\" class=\"submit-btn\">\n          {{ isEditing ? 'Update' : 'Add' }} Vocabulary\n        </button>\n        <button type=\"button\" class=\"cancel-btn\" @click=\"cancel\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { vocabularyService } from '../services/api';\n\nexport default {\n  name: 'VocabularyForm',\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  data() {\n    return {\n      isEditing: false,\n      form: {\n        kanji: '',\n        kana: '',\n        meaning: '',\n        examples: [{ japanese: '', english: '' }],\n        tags: []\n      },\n      tagsInput: '',\n      loading: false,\n      error: null\n    };\n  },\n  created() {\n    if (this.id) {\n      this.isEditing = true;\n      this.fetchVocabulary();\n    }\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getById(this.id);\n        const vocabulary = response.data;\n        \n        this.form = {\n          kanji: vocabulary.kanji || '',\n          kana: vocabulary.kana,\n          meaning: vocabulary.meaning,\n          examples: vocabulary.examples.length ? vocabulary.examples : [{ japanese: '', english: '' }],\n          tags: vocabulary.tags || []\n        };\n        \n        this.tagsInput = this.form.tags.join(', ');\n      } catch (error) {\n        this.error = 'Error fetching vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    addExample() {\n      this.form.examples.push({ japanese: '', english: '' });\n    },\n    removeExample(index) {\n      this.form.examples.splice(index, 1);\n      \n      // Always keep at least one example\n      if (this.form.examples.length === 0) {\n        this.form.examples.push({ japanese: '', english: '' });\n      }\n    },\n    async submitForm() {\n      this.loading = true;\n      \n      // Process tags\n      this.form.tags = this.tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);\n      \n      try {\n        if (this.isEditing) {\n          await vocabularyService.update(this.id, this.form);\n        } else {\n          await vocabularyService.create(this.form);\n          this.resetForm();\n        }\n        \n        this.$router.push('/vocabulary');\n      } catch (error) {\n        this.error = 'Error saving vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    resetForm() {\n      this.form = {\n        kanji: '',\n        kana: '',\n        meaning: '',\n        examples: [{ japanese: '', english: '' }],\n        tags: []\n      };\n      this.tagsInput = '';\n    },\n    cancel() {\n      this.$router.push('/vocabulary');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.vocabulary-form {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\ninput {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.example-item {\n  border: 1px solid #ddd;\n  padding: 15px;\n  margin-bottom: 15px;\n  border-radius: 4px;\n  position: relative;\n}\n\n.remove-btn {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: #f44336;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 5px 10px;\n  cursor: pointer;\n}\n\n.remove-btn:hover {\n  background-color: #d32f2f;\n}\n\n.add-example-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px;\n  margin-bottom: 20px;\n  cursor: pointer;\n  width: 100%;\n}\n\n.add-example-btn:hover {\n  background-color: #0b7dda;\n}\n\n.form-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n\n.submit-btn, .cancel-btn {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.submit-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.submit-btn:hover {\n  background-color: #45a049;\n}\n\n.cancel-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.cancel-btn:hover {\n  background-color: #d32f2f;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}