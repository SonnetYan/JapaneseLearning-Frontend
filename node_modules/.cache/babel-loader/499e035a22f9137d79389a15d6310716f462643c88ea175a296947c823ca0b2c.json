{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { vocabularyService, progressService } from '../services/api';\nexport default {\n  name: 'QuizMode',\n  data() {\n    return {\n      loading: false,\n      error: null,\n      quizStarted: false,\n      quizComplete: false,\n      quizType: 'japanese-to-meaning',\n      quizSize: '10',\n      vocabulary: [],\n      quizQuestions: [],\n      currentQuestionIndex: 0,\n      userAnswer: '',\n      quizResults: [],\n      correctAnswers: 0,\n      userId: '1',\n      // Hardcoded for now, should come from authentication\n      showingFeedback: false,\n      currentFeedback: null\n    };\n  },\n  computed: {\n    totalQuestions() {\n      return this.quizQuestions.length;\n    },\n    currentQuestion() {\n      return this.quizQuestions[this.currentQuestionIndex] || {};\n    },\n    questionPrompt() {\n      return this.quizType === 'meaning-to-japanese' ? 'What is the Japanese for:' : 'What is the meaning of:';\n    }\n  },\n  created() {\n    this.fetchVocabulary();\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getAll();\n        this.vocabulary = response.data;\n      } catch (error) {\n        this.error = 'Error loading vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    startQuiz() {\n      if (this.vocabulary.length === 0) {\n        this.error = 'No vocabulary words available for quiz';\n        return;\n      }\n\n      // Shuffle and select words for quiz\n      const shuffled = [...this.vocabulary].sort(() => 0.5 - Math.random());\n      const questionCount = this.quizSize === 'all' ? this.vocabulary.length : Math.min(parseInt(this.quizSize), this.vocabulary.length);\n      this.quizQuestions = shuffled.slice(0, questionCount);\n      this.quizStarted = true;\n      this.quizComplete = false;\n      this.currentQuestionIndex = 0;\n      this.quizResults = [];\n      this.correctAnswers = 0;\n      this.userAnswer = '';\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n\n      // Focus on the answer input\n      this.$nextTick(() => {\n        if (this.$refs.answerInput) {\n          this.$refs.answerInput.focus();\n        }\n      });\n    },\n    async submitAnswer() {\n      if (!this.userAnswer.trim() || this.showingFeedback) return;\n      const currentWord = this.currentQuestion;\n      let isCorrect = false;\n      if (this.quizType === 'meaning-to-japanese') {\n        const userAnswerClean = this.userAnswer.trim().toLowerCase();\n        const correctKana = currentWord.kana.toLowerCase();\n        const correctKanji = currentWord.kanji ? currentWord.kanji.toLowerCase() : '';\n        isCorrect = userAnswerClean === correctKana || userAnswerClean === correctKanji;\n      } else {\n        const userAnswerClean = this.userAnswer.trim().toLowerCase();\n        const correctMeaning = currentWord.meaning.toLowerCase();\n        isCorrect = userAnswerClean === correctMeaning;\n      }\n\n      // Store result\n      const resultItem = {\n        word: currentWord,\n        userAnswer: this.userAnswer,\n        isCorrect\n      };\n      this.quizResults.push(resultItem);\n      this.currentFeedback = resultItem;\n      this.showingFeedback = true;\n      if (isCorrect) {\n        this.correctAnswers++;\n      }\n\n      // Update user progress in the background\n      this.updateProgress(currentWord._id, isCorrect);\n    },\n    nextQuestion() {\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n\n      // Move to next question or complete quiz\n      if (this.currentQuestionIndex < this.totalQuestions - 1) {\n        this.currentQuestionIndex++;\n        this.userAnswer = '';\n\n        // Focus on the answer input for the next question\n        this.$nextTick(() => {\n          if (this.$refs.answerInput) {\n            this.$refs.answerInput.focus();\n          }\n        });\n      } else {\n        this.quizComplete = true;\n      }\n    },\n    async updateProgress(vocabularyId, isCorrect) {\n      try {\n        await progressService.updateProgress({\n          userId: this.userId,\n          vocabularyId,\n          isCorrect\n        });\n      } catch (error) {\n        console.error('Error updating progress:', error);\n      }\n    },\n    resetQuiz() {\n      this.quizStarted = false;\n      this.quizComplete = false;\n      this.quizResults = [];\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n    },\n    goToVocabulary() {\n      this.$router.push('/vocabulary');\n    }\n  }\n};","map":{"version":3,"names":["vocabularyService","progressService","name","data","loading","error","quizStarted","quizComplete","quizType","quizSize","vocabulary","quizQuestions","currentQuestionIndex","userAnswer","quizResults","correctAnswers","userId","showingFeedback","currentFeedback","computed","totalQuestions","length","currentQuestion","questionPrompt","created","fetchVocabulary","methods","response","getAll","message","console","startQuiz","shuffled","sort","Math","random","questionCount","min","parseInt","slice","$nextTick","$refs","answerInput","focus","submitAnswer","trim","currentWord","isCorrect","userAnswerClean","toLowerCase","correctKana","kana","correctKanji","kanji","correctMeaning","meaning","resultItem","word","push","updateProgress","_id","nextQuestion","vocabularyId","resetQuiz","goToVocabulary","$router"],"sources":["/Users/sonnet/Documents/4370 Web Programming/ai programming/japanese-learning-app/frontend/src/components/QuizMode.vue"],"sourcesContent":["<template>\n  <div class=\"quiz-container\">\n    <div v-if=\"loading\" class=\"loading\">\n      Loading quiz...\n    </div>\n    \n    <div v-else-if=\"error\" class=\"error\">\n      {{ error }}\n    </div>\n    \n    <div v-else-if=\"!quizStarted\" class=\"quiz-setup\">\n      <h2>Quiz Mode</h2>\n      <p>Test your Japanese vocabulary knowledge!</p>\n      \n      <div class=\"quiz-options\">\n        <div class=\"form-group\">\n          <label for=\"quizType\">Quiz Type</label>\n          <select id=\"quizType\" v-model=\"quizType\">\n            <option value=\"meaning-to-japanese\">English to Japanese</option>\n            <option value=\"japanese-to-meaning\">Japanese to English</option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label for=\"quizSize\">Number of Questions</label>\n          <select id=\"quizSize\" v-model=\"quizSize\">\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"all\">All Words</option>\n          </select>\n        </div>\n      </div>\n      \n      <button @click=\"startQuiz\" class=\"start-btn\">Start Quiz</button>\n    </div>\n    \n    <div v-else-if=\"quizComplete\" class=\"quiz-results\">\n      <h2>Quiz Complete!</h2>\n      \n      <div class=\"score-summary\">\n        <p class=\"score\">Your Score: {{ correctAnswers }} / {{ totalQuestions }}</p>\n        <p class=\"percentage\">{{ Math.round((correctAnswers / totalQuestions) * 100) }}%</p>\n      </div>\n      \n      <div class=\"results-breakdown\">\n        <h3>Results Breakdown</h3>\n        <div v-for=\"(result, index) in quizResults\" :key=\"index\" class=\"result-item\">\n          <div :class=\"['result-card', result.isCorrect ? 'correct' : 'incorrect']\">\n            <p class=\"word\">\n              <span v-if=\"result.word.kanji\">{{ result.word.kanji }} ({{ result.word.kana }})</span>\n              <span v-else>{{ result.word.kana }}</span>\n            </p>\n            <p class=\"meaning\">{{ result.word.meaning }}</p>\n            <p class=\"answer-status\">\n              <span v-if=\"result.isCorrect\">✓ Correct</span>\n              <span v-else>✗ Incorrect (Your answer: {{ result.userAnswer }})</span>\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"quiz-actions\">\n        <button @click=\"resetQuiz\" class=\"reset-btn\">Take Another Quiz</button>\n        <button @click=\"goToVocabulary\" class=\"vocab-btn\">Go to Vocabulary</button>\n      </div>\n    </div>\n    \n    <div v-else class=\"quiz-question\">\n      <div class=\"progress-bar\">\n        <div class=\"progress\" :style=\"{ width: `${(currentQuestionIndex / totalQuestions) * 100}%` }\"></div>\n      </div>\n      \n      <div class=\"question-counter\">\n        Question {{ currentQuestionIndex + 1 }} of {{ totalQuestions }}\n      </div>\n      \n      <div class=\"question\" v-if=\"!showingFeedback\">\n        <h3>{{ questionPrompt }}</h3>\n        \n        <div v-if=\"quizType === 'meaning-to-japanese'\" class=\"question-content\">\n          <p class=\"prompt\">{{ currentQuestion.meaning }}</p>\n          <input \n            type=\"text\" \n            v-model=\"userAnswer\" \n            placeholder=\"Enter in Japanese...\"\n            @keyup.enter=\"submitAnswer\"\n            ref=\"answerInput\"\n          />\n        </div>\n        \n        <div v-else class=\"question-content\">\n          <p class=\"prompt\">\n            <span v-if=\"currentQuestion.kanji\">{{ currentQuestion.kanji }}</span>\n            <span v-else>{{ currentQuestion.kana }}</span>\n          </p>\n          <input \n            type=\"text\" \n            v-model=\"userAnswer\" \n            placeholder=\"Enter meaning in English...\"\n            @keyup.enter=\"submitAnswer\"\n            ref=\"answerInput\"\n          />\n        </div>\n        \n        <button @click=\"submitAnswer\" class=\"submit-btn\">Submit</button>\n      </div>\n      \n      <div class=\"feedback\" v-else>\n        <div :class=\"['feedback-card', currentFeedback.isCorrect ? 'correct' : 'incorrect']\">\n          <div class=\"feedback-header\">\n            <h3 v-if=\"currentFeedback.isCorrect\">✓ Correct!</h3>\n            <h3 v-else>✗ Incorrect</h3>\n          </div>\n          \n          <div class=\"feedback-content\">\n            <div class=\"word-details\">\n              <p class=\"word\">\n                <span v-if=\"currentQuestion.kanji\">{{ currentQuestion.kanji }} ({{ currentQuestion.kana }})</span>\n                <span v-else>{{ currentQuestion.kana }}</span>\n              </p>\n              <p class=\"meaning\">{{ currentQuestion.meaning }}</p>\n            </div>\n            \n            <div class=\"user-answer\" v-if=\"!currentFeedback.isCorrect\">\n              <p>Your answer: <span class=\"incorrect-text\">{{ currentFeedback.userAnswer }}</span></p>\n              <p>Correct answer: <span class=\"correct-text\">{{ quizType === 'meaning-to-japanese' ? currentQuestion.kana : currentQuestion.meaning }}</span></p>\n            </div>\n            \n            <div class=\"example\" v-if=\"currentQuestion.examples && currentQuestion.examples.length\">\n              <p class=\"example-label\">Example:</p>\n              <p class=\"japanese-text\">{{ currentQuestion.examples[0].japanese }}</p>\n              <p class=\"english-text\">{{ currentQuestion.examples[0].english }}</p>\n            </div>\n          </div>\n          \n          <button @click=\"nextQuestion\" class=\"next-btn\">\n            {{ currentQuestionIndex < totalQuestions - 1 ? 'Next Question' : 'View Results' }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { vocabularyService, progressService } from '../services/api';\n\nexport default {\n  name: 'QuizMode',\n  data() {\n    return {\n      loading: false,\n      error: null,\n      quizStarted: false,\n      quizComplete: false,\n      quizType: 'japanese-to-meaning',\n      quizSize: '10',\n      vocabulary: [],\n      quizQuestions: [],\n      currentQuestionIndex: 0,\n      userAnswer: '',\n      quizResults: [],\n      correctAnswers: 0,\n      userId: '1', // Hardcoded for now, should come from authentication\n      showingFeedback: false,\n      currentFeedback: null\n    };\n  },\n  computed: {\n    totalQuestions() {\n      return this.quizQuestions.length;\n    },\n    currentQuestion() {\n      return this.quizQuestions[this.currentQuestionIndex] || {};\n    },\n    questionPrompt() {\n      return this.quizType === 'meaning-to-japanese' \n        ? 'What is the Japanese for:' \n        : 'What is the meaning of:';\n    }\n  },\n  created() {\n    this.fetchVocabulary();\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getAll();\n        this.vocabulary = response.data;\n      } catch (error) {\n        this.error = 'Error loading vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    startQuiz() {\n      if (this.vocabulary.length === 0) {\n        this.error = 'No vocabulary words available for quiz';\n        return;\n      }\n      \n      // Shuffle and select words for quiz\n      const shuffled = [...this.vocabulary].sort(() => 0.5 - Math.random());\n      const questionCount = this.quizSize === 'all' \n        ? this.vocabulary.length \n        : Math.min(parseInt(this.quizSize), this.vocabulary.length);\n        \n      this.quizQuestions = shuffled.slice(0, questionCount);\n      this.quizStarted = true;\n      this.quizComplete = false;\n      this.currentQuestionIndex = 0;\n      this.quizResults = [];\n      this.correctAnswers = 0;\n      this.userAnswer = '';\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n      \n      // Focus on the answer input\n      this.$nextTick(() => {\n        if (this.$refs.answerInput) {\n          this.$refs.answerInput.focus();\n        }\n      });\n    },\n    async submitAnswer() {\n      if (!this.userAnswer.trim() || this.showingFeedback) return;\n      \n      const currentWord = this.currentQuestion;\n      let isCorrect = false;\n      \n      if (this.quizType === 'meaning-to-japanese') {\n        const userAnswerClean = this.userAnswer.trim().toLowerCase();\n        const correctKana = currentWord.kana.toLowerCase();\n        const correctKanji = currentWord.kanji ? currentWord.kanji.toLowerCase() : '';\n        \n        isCorrect = userAnswerClean === correctKana || userAnswerClean === correctKanji;\n      } else {\n        const userAnswerClean = this.userAnswer.trim().toLowerCase();\n        const correctMeaning = currentWord.meaning.toLowerCase();\n        \n        isCorrect = userAnswerClean === correctMeaning;\n      }\n      \n      // Store result\n      const resultItem = {\n        word: currentWord,\n        userAnswer: this.userAnswer,\n        isCorrect\n      };\n      \n      this.quizResults.push(resultItem);\n      this.currentFeedback = resultItem;\n      this.showingFeedback = true;\n      \n      if (isCorrect) {\n        this.correctAnswers++;\n      }\n      \n      // Update user progress in the background\n      this.updateProgress(currentWord._id, isCorrect);\n    },\n    nextQuestion() {\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n      \n      // Move to next question or complete quiz\n      if (this.currentQuestionIndex < this.totalQuestions - 1) {\n        this.currentQuestionIndex++;\n        this.userAnswer = '';\n        \n        // Focus on the answer input for the next question\n        this.$nextTick(() => {\n          if (this.$refs.answerInput) {\n            this.$refs.answerInput.focus();\n          }\n        });\n      } else {\n        this.quizComplete = true;\n      }\n    },\n    async updateProgress(vocabularyId, isCorrect) {\n      try {\n        await progressService.updateProgress({\n          userId: this.userId,\n          vocabularyId,\n          isCorrect\n        });\n      } catch (error) {\n        console.error('Error updating progress:', error);\n      }\n    },\n    resetQuiz() {\n      this.quizStarted = false;\n      this.quizComplete = false;\n      this.quizResults = [];\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n    },\n    goToVocabulary() {\n      this.$router.push('/vocabulary');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.quiz-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.loading, .error {\n  text-align: center;\n  padding: 20px;\n}\n\n.error {\n  color: #f44336;\n}\n\n.quiz-setup {\n  text-align: center;\n}\n\n.quiz-options {\n  max-width: 400px;\n  margin: 20px auto;\n}\n\n.form-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\nselect {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.start-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 12px 30px;\n  font-size: 18px;\n  cursor: pointer;\n}\n\n.start-btn:hover {\n  background-color: #45a049;\n}\n\n.quiz-question {\n  text-align: center;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 10px;\n  background-color: #f2f2f2;\n  border-radius: 5px;\n  margin-bottom: 20px;\n  overflow: hidden;\n}\n\n.progress {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.question-counter {\n  margin-bottom: 20px;\n  font-size: 16px;\n  color: #666;\n}\n\n.question h3 {\n  margin-bottom: 30px;\n}\n\n.question-content {\n  margin-bottom: 20px;\n}\n\n.prompt {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\ninput {\n  width: 100%;\n  max-width: 400px;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 18px;\n  margin-bottom: 20px;\n}\n\n.submit-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 25px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.submit-btn:hover {\n  background-color: #0b7dda;\n}\n\n/* Feedback Styles */\n.feedback {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.feedback-card {\n  width: 100%;\n  max-width: 600px;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  margin: 0 auto;\n  animation: fadeInUp 0.4s ease-out;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.feedback-card.correct {\n  border: 2px solid #4CAF50;\n}\n\n.feedback-card.incorrect {\n  border: 2px solid #f44336;\n}\n\n.feedback-header {\n  padding: 15px;\n  color: white;\n}\n\n.feedback-card.correct .feedback-header {\n  background-color: #4CAF50;\n}\n\n.feedback-card.incorrect .feedback-header {\n  background-color: #f44336;\n}\n\n.feedback-header h3 {\n  margin: 0;\n  font-size: 20px;\n}\n\n.feedback-content {\n  padding: 20px;\n  background-color: white;\n}\n\n.word-details {\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid #eee;\n}\n\n.word {\n  font-size: 22px;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.meaning {\n  font-size: 18px;\n  color: #555;\n}\n\n.user-answer {\n  margin: 15px 0;\n  padding: 15px;\n  background-color: #f9f9f9;\n  border-radius: 4px;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n}\n\n.example {\n  margin-top: 20px;\n  padding-top: 15px;\n  border-top: 1px solid #eee;\n}\n\n.example-label {\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\n.japanese-text {\n  font-size: 18px;\n  margin-bottom: 5px;\n}\n\n.english-text {\n  color: #666;\n}\n\n.next-btn {\n  display: block;\n  width: 100%;\n  padding: 15px;\n  border: none;\n  background-color: var(--kageyama-blue, #1A3263);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.next-btn:hover {\n  background-color: #142851;\n}\n\n.quiz-results {\n  text-align: center;\n}\n\n.score-summary {\n  margin: 30px 0;\n}\n\n.score {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.percentage {\n  font-size: 36px;\n  font-weight: bold;\n  color: #4CAF50;\n}\n\n.results-breakdown {\n  margin: 30px 0;\n  text-align: left;\n}\n\n.result-item {\n  margin-bottom: 15px;\n}\n\n.result-card {\n  padding: 15px;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n}\n\n.result-card.correct {\n  border-left: 5px solid #4CAF50;\n}\n\n.result-card.incorrect {\n  border-left: 5px solid #f44336;\n}\n\n.answer-status {\n  margin-top: 10px;\n  font-style: italic;\n}\n\n.quiz-actions {\n  margin-top: 30px;\n}\n\n.reset-btn, .vocab-btn {\n  margin: 0 10px;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.reset-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.reset-btn:hover {\n  background-color: #0b7dda;\n}\n\n.vocab-btn {\n  background-color: #9E9E9E;\n  color: white;\n}\n\n.vocab-btn:hover {\n  background-color: #757575;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}