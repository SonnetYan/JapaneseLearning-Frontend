{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { vocabularyService, progressService } from '../services/api';\nexport default {\n  name: 'FlashcardView',\n  data() {\n    return {\n      loading: false,\n      error: null,\n      vocabulary: [],\n      dueForReview: [],\n      flashcardStarted: false,\n      flashcardComplete: false,\n      flashcardType: 'japanese-to-meaning',\n      flashcardSource: 'all',\n      flashcardCount: '10',\n      flashcards: [],\n      currentCardIndex: 0,\n      cardFlipped: false,\n      currentDirection: 'japanese-to-meaning',\n      stats: {\n        easy: 0,\n        good: 0,\n        hard: 0\n      },\n      userId: '1' // Hardcoded for now, should come from authentication\n    };\n  },\n  computed: {\n    currentCard() {\n      return this.flashcards[this.currentCardIndex] || {};\n    }\n  },\n  created() {\n    this.fetchVocabulary();\n    this.fetchDueWords();\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getAll();\n        this.vocabulary = response.data;\n      } catch (error) {\n        this.error = 'Error loading vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchDueWords() {\n      try {\n        const response = await progressService.getReviewWords(this.userId);\n        this.dueForReview = response.data.map(item => item.vocabularyId);\n      } catch (error) {\n        console.error('Error fetching due words:', error);\n        // Fallback to all vocabulary if there's an error\n        this.dueForReview = [];\n      }\n    },\n    startFlashcards() {\n      let wordPool = [];\n\n      // Determine which words to use\n      if (this.flashcardSource === 'due' && this.dueForReview.length > 0) {\n        wordPool = this.dueForReview;\n      } else {\n        wordPool = this.vocabulary;\n      }\n      if (wordPool.length === 0) {\n        this.error = 'No vocabulary words available for flashcards';\n        return;\n      }\n\n      // Shuffle the words\n      const shuffled = [...wordPool].sort(() => 0.5 - Math.random());\n\n      // Select the number of words\n      const cardCount = this.flashcardCount === 'all' ? wordPool.length : Math.min(parseInt(this.flashcardCount), wordPool.length);\n      this.flashcards = shuffled.slice(0, cardCount);\n\n      // Prepare cards with directions\n      if (this.flashcardType === 'mixed') {\n        // For mixed, we'll set the direction for each card\n        this.flashcards = this.flashcards.map(card => ({\n          ...card,\n          direction: Math.random() > 0.5 ? 'japanese-to-meaning' : 'meaning-to-japanese'\n        }));\n        // Set initial direction\n        this.currentDirection = this.flashcards[0].direction;\n      } else {\n        // Otherwise, all cards use the same direction\n        this.currentDirection = this.flashcardType;\n      }\n\n      // Reset session stats\n      this.currentCardIndex = 0;\n      this.cardFlipped = false;\n      this.flashcardStarted = true;\n      this.flashcardComplete = false;\n      this.stats = {\n        easy: 0,\n        good: 0,\n        hard: 0\n      };\n    },\n    flipCard() {\n      if (!this.cardFlipped) {\n        this.cardFlipped = true;\n      }\n    },\n    async rateCard(difficulty) {\n      // Update stats\n      this.stats[difficulty]++;\n\n      // Calculate new status based on difficulty\n      let newStatus;\n      let isCorrect = true;\n      switch (difficulty) {\n        case 'easy':\n          newStatus = 'mastered';\n          break;\n        case 'good':\n          newStatus = 'reviewing';\n          break;\n        case 'hard':\n          newStatus = 'learning';\n          isCorrect = false;\n          break;\n        default:\n          newStatus = 'learning';\n      }\n\n      // Update progress in the backend\n      try {\n        await progressService.updateProgress({\n          userId: this.userId,\n          vocabularyId: this.currentCard._id,\n          status: newStatus,\n          isCorrect\n        });\n      } catch (error) {\n        console.error('Error updating progress:', error);\n      }\n\n      // Move to next card\n      this.cardFlipped = false;\n      if (this.currentCardIndex >= this.flashcards.length - 1) {\n        // We've reached the end\n        this.flashcardComplete = true;\n      } else {\n        this.currentCardIndex++;\n\n        // Update direction for next card if mixed\n        if (this.flashcardType === 'mixed') {\n          this.currentDirection = this.flashcards[this.currentCardIndex].direction;\n        }\n      }\n    },\n    resetFlashcards() {\n      this.flashcardStarted = false;\n      this.flashcardComplete = false;\n      this.currentCardIndex = 0;\n      this.cardFlipped = false;\n\n      // Refresh the due words\n      this.fetchDueWords();\n    }\n  }\n};","map":{"version":3,"names":["vocabularyService","progressService","name","data","loading","error","vocabulary","dueForReview","flashcardStarted","flashcardComplete","flashcardType","flashcardSource","flashcardCount","flashcards","currentCardIndex","cardFlipped","currentDirection","stats","easy","good","hard","userId","computed","currentCard","created","fetchVocabulary","fetchDueWords","methods","response","getAll","message","console","getReviewWords","map","item","vocabularyId","startFlashcards","wordPool","length","shuffled","sort","Math","random","cardCount","min","parseInt","slice","card","direction","flipCard","rateCard","difficulty","newStatus","isCorrect","updateProgress","_id","status","resetFlashcards"],"sources":["/Users/sonnet/Documents/4370 Web Programming/ai programming/japanese-learning-app/frontend/src/views/FlashcardView.vue"],"sourcesContent":["<template>\n  <div class=\"flashcard-view\">\n    <h1>Flashcard Review</h1>\n    \n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n    \n    <div v-else-if=\"error\" class=\"error\">{{ error }}</div>\n    \n    <div v-else-if=\"!flashcardStarted\" class=\"flashcard-setup\">\n      <h2>Flashcard Options</h2>\n      \n      <div class=\"form-group\">\n        <label for=\"flashcard-type\">Flashcard Type</label>\n        <select id=\"flashcard-type\" v-model=\"flashcardType\">\n          <option value=\"japanese-to-meaning\">Japanese to Meaning</option>\n          <option value=\"meaning-to-japanese\">Meaning to Japanese</option>\n          <option value=\"mixed\">Mixed (Both Directions)</option>\n        </select>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"flashcard-source\">Flashcard Source</label>\n        <select id=\"flashcard-source\" v-model=\"flashcardSource\">\n          <option value=\"all\">All Vocabulary</option>\n          <option value=\"due\">Due for Review</option>\n        </select>\n      </div>\n      \n      <div v-if=\"flashcardSource === 'all'\" class=\"form-group\">\n        <label for=\"flashcard-count\">Number of Flashcards</label>\n        <select id=\"flashcard-count\" v-model=\"flashcardCount\">\n          <option value=\"10\">10</option>\n          <option value=\"20\">20</option>\n          <option value=\"30\">30</option>\n          <option value=\"all\">All</option>\n        </select>\n      </div>\n      \n      <button @click=\"startFlashcards\" class=\"start-btn\">Start Flashcards</button>\n    </div>\n    \n    <div v-else-if=\"flashcardStarted && !flashcardComplete\" class=\"flashcard-session\">\n      <div class=\"progress-bar\">\n        <div class=\"progress\" :style=\"{ width: `${(currentCardIndex / flashcards.length) * 100}%` }\"></div>\n        <div class=\"progress-text\">{{ currentCardIndex }} / {{ flashcards.length }}</div>\n      </div>\n      \n      <div \n        class=\"flashcard-container\"\n        @click=\"flipCard\"\n      >\n        <div \n          class=\"flashcard\" \n          :class=\"{ flipped: cardFlipped }\"\n        >\n          <div class=\"flashcard-front\">\n            <div v-if=\"currentDirection === 'japanese-to-meaning'\" class=\"japanese\">\n              <div v-if=\"currentCard.kanji\" class=\"kanji\">{{ currentCard.kanji }}</div>\n              <div class=\"kana\">{{ currentCard.kana }}</div>\n            </div>\n            <div v-else class=\"meaning\">\n              {{ currentCard.meaning }}\n            </div>\n          </div>\n          \n          <div class=\"flashcard-back\">\n            <div v-if=\"currentDirection === 'japanese-to-meaning'\" class=\"meaning\">\n              {{ currentCard.meaning }}\n            </div>\n            <div v-else class=\"japanese\">\n              <div v-if=\"currentCard.kanji\" class=\"kanji\">{{ currentCard.kanji }}</div>\n              <div class=\"kana\">{{ currentCard.kana }}</div>\n            </div>\n            \n            <div v-if=\"currentCard.examples && currentCard.examples.length\" class=\"examples\">\n              <div class=\"example\">\n                <div class=\"japanese-example\">{{ currentCard.examples[0].japanese }}</div>\n                <div class=\"english-example\">{{ currentCard.examples[0].english }}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div v-if=\"cardFlipped\" class=\"flashcard-actions\">\n        <button @click=\"rateCard('hard')\" class=\"hard-btn\">Hard</button>\n        <button @click=\"rateCard('good')\" class=\"good-btn\">Good</button>\n        <button @click=\"rateCard('easy')\" class=\"easy-btn\">Easy</button>\n      </div>\n    </div>\n    \n    <div v-else class=\"flashcard-complete\">\n      <h2>Flashcard Session Complete!</h2>\n      \n      <div class=\"stats\">\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Total Cards:</span>\n          <span class=\"stat-value\">{{ flashcards.length }}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Easy:</span>\n          <span class=\"stat-value\">{{ stats.easy }}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Good:</span>\n          <span class=\"stat-value\">{{ stats.good }}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Hard:</span>\n          <span class=\"stat-value\">{{ stats.hard }}</span>\n        </div>\n      </div>\n      \n      <div class=\"flashcard-complete-actions\">\n        <button @click=\"resetFlashcards\" class=\"reset-btn\">Start New Session</button>\n        <router-link to=\"/vocabulary\" class=\"vocab-btn\">Back to Vocabulary</router-link>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { vocabularyService, progressService } from '../services/api';\n\nexport default {\n  name: 'FlashcardView',\n  data() {\n    return {\n      loading: false,\n      error: null,\n      vocabulary: [],\n      dueForReview: [],\n      flashcardStarted: false,\n      flashcardComplete: false,\n      flashcardType: 'japanese-to-meaning',\n      flashcardSource: 'all',\n      flashcardCount: '10',\n      flashcards: [],\n      currentCardIndex: 0,\n      cardFlipped: false,\n      currentDirection: 'japanese-to-meaning',\n      stats: {\n        easy: 0,\n        good: 0,\n        hard: 0\n      },\n      userId: '1' // Hardcoded for now, should come from authentication\n    };\n  },\n  computed: {\n    currentCard() {\n      return this.flashcards[this.currentCardIndex] || {};\n    }\n  },\n  created() {\n    this.fetchVocabulary();\n    this.fetchDueWords();\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getAll();\n        this.vocabulary = response.data;\n      } catch (error) {\n        this.error = 'Error loading vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchDueWords() {\n      try {\n        const response = await progressService.getReviewWords(this.userId);\n        this.dueForReview = response.data.map(item => item.vocabularyId);\n      } catch (error) {\n        console.error('Error fetching due words:', error);\n        // Fallback to all vocabulary if there's an error\n        this.dueForReview = [];\n      }\n    },\n    startFlashcards() {\n      let wordPool = [];\n      \n      // Determine which words to use\n      if (this.flashcardSource === 'due' && this.dueForReview.length > 0) {\n        wordPool = this.dueForReview;\n      } else {\n        wordPool = this.vocabulary;\n      }\n      \n      if (wordPool.length === 0) {\n        this.error = 'No vocabulary words available for flashcards';\n        return;\n      }\n      \n      // Shuffle the words\n      const shuffled = [...wordPool].sort(() => 0.5 - Math.random());\n      \n      // Select the number of words\n      const cardCount = this.flashcardCount === 'all' \n        ? wordPool.length \n        : Math.min(parseInt(this.flashcardCount), wordPool.length);\n      \n      this.flashcards = shuffled.slice(0, cardCount);\n      \n      // Prepare cards with directions\n      if (this.flashcardType === 'mixed') {\n        // For mixed, we'll set the direction for each card\n        this.flashcards = this.flashcards.map(card => ({\n          ...card,\n          direction: Math.random() > 0.5 ? 'japanese-to-meaning' : 'meaning-to-japanese'\n        }));\n        // Set initial direction\n        this.currentDirection = this.flashcards[0].direction;\n      } else {\n        // Otherwise, all cards use the same direction\n        this.currentDirection = this.flashcardType;\n      }\n      \n      // Reset session stats\n      this.currentCardIndex = 0;\n      this.cardFlipped = false;\n      this.flashcardStarted = true;\n      this.flashcardComplete = false;\n      this.stats = {\n        easy: 0,\n        good: 0,\n        hard: 0\n      };\n    },\n    flipCard() {\n      if (!this.cardFlipped) {\n        this.cardFlipped = true;\n      }\n    },\n    async rateCard(difficulty) {\n      // Update stats\n      this.stats[difficulty]++;\n      \n      // Calculate new status based on difficulty\n      let newStatus;\n      let isCorrect = true;\n      \n      switch (difficulty) {\n        case 'easy':\n          newStatus = 'mastered';\n          break;\n        case 'good':\n          newStatus = 'reviewing';\n          break;\n        case 'hard':\n          newStatus = 'learning';\n          isCorrect = false;\n          break;\n        default:\n          newStatus = 'learning';\n      }\n      \n      // Update progress in the backend\n      try {\n        await progressService.updateProgress({\n          userId: this.userId,\n          vocabularyId: this.currentCard._id,\n          status: newStatus,\n          isCorrect\n        });\n      } catch (error) {\n        console.error('Error updating progress:', error);\n      }\n      \n      // Move to next card\n      this.cardFlipped = false;\n      \n      if (this.currentCardIndex >= this.flashcards.length - 1) {\n        // We've reached the end\n        this.flashcardComplete = true;\n      } else {\n        this.currentCardIndex++;\n        \n        // Update direction for next card if mixed\n        if (this.flashcardType === 'mixed') {\n          this.currentDirection = this.flashcards[this.currentCardIndex].direction;\n        }\n      }\n    },\n    resetFlashcards() {\n      this.flashcardStarted = false;\n      this.flashcardComplete = false;\n      this.currentCardIndex = 0;\n      this.cardFlipped = false;\n      \n      // Refresh the due words\n      this.fetchDueWords();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flashcard-view {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1 {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.loading, .error {\n  text-align: center;\n  padding: 40px;\n}\n\n.error {\n  color: #f44336;\n}\n\n.flashcard-setup {\n  background-color: #f5f5f5;\n  padding: 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\nselect {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.start-btn, .reset-btn, .vocab-btn {\n  display: block;\n  width: 100%;\n  padding: 12px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.start-btn {\n  background-color: var(--hinata-orange, #F5A623);\n  color: white;\n}\n\n.start-btn:hover {\n  opacity: 0.9;\n}\n\n.progress-bar {\n  height: 10px;\n  background-color: #eee;\n  border-radius: 5px;\n  margin-bottom: 20px;\n  position: relative;\n}\n\n.progress {\n  height: 100%;\n  background-color: var(--hinata-orange, #F5A623);\n  border-radius: 5px;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  position: absolute;\n  right: 0;\n  top: -20px;\n  font-size: 14px;\n  color: #666;\n}\n\n.flashcard-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  cursor: pointer;\n}\n\n.flashcard {\n  position: relative;\n  width: 500px;\n  max-width: 100%;\n  height: 300px;\n  perspective: 2000px;\n  transform-style: preserve-3d;\n  transition: transform 0.1s;\n}\n\n.flashcard:hover {\n  transform: scale(1.02);\n}\n\n.flashcard-front, .flashcard-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  transform-style: preserve-3d;\n  border-radius: 16px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  overflow: hidden;\n}\n\n.flashcard-front {\n  background-color: var(--kageyama-blue, #1A3263);\n  color: white;\n  z-index: 2;\n  transform: rotateY(0deg);\n}\n\n.flashcard-back {\n  background-color: white;\n  border: 2px solid var(--kageyama-blue, #1A3263);\n  color: #333;\n  transform: rotateY(180deg);\n}\n\n.flashcard.flipped .flashcard-front {\n  transform: rotateY(180deg);\n}\n\n.flashcard.flipped .flashcard-back {\n  transform: rotateY(0deg);\n}\n\n.kanji {\n  font-size: 3rem;\n  margin-bottom: 10px;\n  opacity: 0;\n  transform: translateY(20px);\n  animation: fadeUpIn 0.5s forwards;\n}\n\n.kana {\n  font-size: 1.8rem;\n  opacity: 0;\n  transform: translateY(20px);\n  animation: fadeUpIn 0.5s 0.1s forwards;\n}\n\n.meaning {\n  font-size: 2rem;\n  text-align: center;\n  opacity: 0;\n  transform: translateY(20px);\n  animation: fadeUpIn 0.5s 0.2s forwards;\n}\n\n@keyframes fadeUpIn {\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.examples {\n  margin-top: 20px;\n  width: 100%;\n  opacity: 0;\n  animation: fadeIn 0.5s 0.3s forwards;\n}\n\n@keyframes fadeIn {\n  to {\n    opacity: 1;\n  }\n}\n\n.example {\n  border-top: 1px solid #eee;\n  padding-top: 15px;\n  text-align: center;\n}\n\n.japanese-example {\n  font-size: 1.2rem;\n  margin-bottom: 5px;\n}\n\n.english-example {\n  color: #666;\n}\n\n.flashcard-actions {\n  display: flex;\n  justify-content: space-between;\n  max-width: 500px;\n  margin: 0 auto;\n}\n\n.hard-btn, .good-btn, .easy-btn {\n  flex: 1;\n  padding: 12px;\n  border: none;\n  font-weight: bold;\n  cursor: pointer;\n  margin: 0 5px;\n  border-radius: 4px;\n  transition: transform 0.2s, opacity 0.2s;\n}\n\n.hard-btn:hover, .good-btn:hover, .easy-btn:hover {\n  transform: translateY(-3px);\n  opacity: 0.9;\n}\n\n.hard-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.good-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.easy-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.flashcard-complete {\n  text-align: center;\n}\n\n.stats {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n}\n\n.stat-item {\n  background-color: #f5f5f5;\n  padding: 15px;\n  border-radius: 8px;\n  flex: 1;\n  margin: 0 5px;\n}\n\n.stat-label {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  color: var(--hinata-orange, #F5A623);\n}\n\n.flashcard-complete-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 30px;\n}\n\n.reset-btn, .vocab-btn {\n  flex: 1;\n  margin: 0 10px;\n}\n\n.reset-btn {\n  background-color: var(--hinata-orange, #F5A623);\n  color: white;\n}\n\n.vocab-btn {\n  background-color: var(--kageyama-blue, #1A3263);\n  color: white;\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n@media (max-width: 600px) {\n  .flashcard {\n    width: 100%;\n    height: 250px;\n  }\n  \n  .kanji {\n    font-size: 2.5rem;\n  }\n  \n  .kana {\n    font-size: 1.5rem;\n  }\n  \n  .meaning {\n    font-size: 1.8rem;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}