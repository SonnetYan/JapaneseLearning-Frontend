{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, vModelText as _vModelText, withKeys as _withKeys, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"quiz-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"error\"\n};\nconst _hoisted_4 = {\n  key: 2,\n  class: \"quiz-setup\"\n};\nconst _hoisted_5 = {\n  class: \"quiz-options\"\n};\nconst _hoisted_6 = {\n  class: \"form-group\"\n};\nconst _hoisted_7 = {\n  class: \"form-group\"\n};\nconst _hoisted_8 = {\n  key: 3,\n  class: \"quiz-results\"\n};\nconst _hoisted_9 = {\n  class: \"score-summary\"\n};\nconst _hoisted_10 = {\n  class: \"score\"\n};\nconst _hoisted_11 = {\n  class: \"percentage\"\n};\nconst _hoisted_12 = {\n  class: \"results-breakdown\"\n};\nconst _hoisted_13 = {\n  class: \"word\"\n};\nconst _hoisted_14 = {\n  key: 0\n};\nconst _hoisted_15 = {\n  key: 1\n};\nconst _hoisted_16 = {\n  class: \"meaning\"\n};\nconst _hoisted_17 = {\n  class: \"answer-status\"\n};\nconst _hoisted_18 = {\n  key: 0\n};\nconst _hoisted_19 = {\n  key: 1\n};\nconst _hoisted_20 = {\n  class: \"quiz-actions\"\n};\nconst _hoisted_21 = {\n  key: 4,\n  class: \"quiz-question\"\n};\nconst _hoisted_22 = {\n  class: \"progress-bar\"\n};\nconst _hoisted_23 = {\n  class: \"question-counter\"\n};\nconst _hoisted_24 = {\n  key: 0,\n  class: \"question\"\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"question-content\"\n};\nconst _hoisted_26 = {\n  class: \"prompt\"\n};\nconst _hoisted_27 = {\n  key: 1,\n  class: \"question-content\"\n};\nconst _hoisted_28 = {\n  class: \"prompt\"\n};\nconst _hoisted_29 = {\n  key: 0\n};\nconst _hoisted_30 = {\n  key: 1\n};\nconst _hoisted_31 = {\n  key: 1,\n  class: \"feedback\"\n};\nconst _hoisted_32 = {\n  class: \"feedback-header\"\n};\nconst _hoisted_33 = {\n  key: 0\n};\nconst _hoisted_34 = {\n  key: 1\n};\nconst _hoisted_35 = {\n  class: \"feedback-content\"\n};\nconst _hoisted_36 = {\n  class: \"word-details\"\n};\nconst _hoisted_37 = {\n  class: \"word\"\n};\nconst _hoisted_38 = {\n  key: 0\n};\nconst _hoisted_39 = {\n  key: 1\n};\nconst _hoisted_40 = {\n  class: \"meaning\"\n};\nconst _hoisted_41 = {\n  key: 0,\n  class: \"user-answer\"\n};\nconst _hoisted_42 = {\n  class: \"incorrect-text\"\n};\nconst _hoisted_43 = {\n  class: \"correct-text\"\n};\nconst _hoisted_44 = {\n  key: 1,\n  class: \"example\"\n};\nconst _hoisted_45 = {\n  class: \"japanese-text\"\n};\nconst _hoisted_46 = {\n  class: \"english-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \" Loading quiz... \")) : $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString($data.error), 1 /* TEXT */)) : !$data.quizStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[15] || (_cache[15] = _createElementVNode(\"h2\", null, \"Quiz Mode\", -1 /* HOISTED */)), _cache[16] || (_cache[16] = _createElementVNode(\"p\", null, \"Test your Japanese vocabulary knowledge!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"quizType\"\n  }, \"Quiz Type\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"quizType\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.quizType = $event)\n  }, _cache[11] || (_cache[11] = [_createElementVNode(\"option\", {\n    value: \"meaning-to-japanese\"\n  }, \"English to Japanese\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"japanese-to-meaning\"\n  }, \"Japanese to English\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.quizType]])]), _createElementVNode(\"div\", _hoisted_7, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    for: \"quizSize\"\n  }, \"Number of Questions\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"quizSize\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.quizSize = $event)\n  }, _cache[13] || (_cache[13] = [_createElementVNode(\"option\", {\n    value: \"5\"\n  }, \"5\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"10\"\n  }, \"10\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"20\"\n  }, \"20\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"all\"\n  }, \"All Words\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.quizSize]])])]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.startQuiz && $options.startQuiz(...args)),\n    class: \"start-btn\"\n  }, \"Start Quiz\")])) : $data.quizComplete ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_cache[18] || (_cache[18] = _createElementVNode(\"h2\", null, \"Quiz Complete!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"p\", _hoisted_10, \"Your Score: \" + _toDisplayString($data.correctAnswers) + \" / \" + _toDisplayString($options.totalQuestions), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_11, _toDisplayString(Math.round($data.correctAnswers / $options.totalQuestions * 100)) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_12, [_cache[17] || (_cache[17] = _createElementVNode(\"h3\", null, \"Results Breakdown\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.quizResults, (result, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"result-item\"\n    }, [_createElementVNode(\"div\", {\n      class: _normalizeClass(['result-card', result.isCorrect ? 'correct' : 'incorrect'])\n    }, [_createElementVNode(\"p\", _hoisted_13, [result.word.kanji ? (_openBlock(), _createElementBlock(\"span\", _hoisted_14, _toDisplayString(result.word.kanji) + \" (\" + _toDisplayString(result.word.kana) + \")\", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_15, _toDisplayString(result.word.kana), 1 /* TEXT */))]), _createElementVNode(\"p\", _hoisted_16, _toDisplayString(result.word.meaning), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_17, [result.isCorrect ? (_openBlock(), _createElementBlock(\"span\", _hoisted_18, \"✓ Correct\")) : (_openBlock(), _createElementBlock(\"span\", _hoisted_19, \"✗ Incorrect (Your answer: \" + _toDisplayString(result.userAnswer) + \")\", 1 /* TEXT */))])], 2 /* CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.resetQuiz && $options.resetQuiz(...args)),\n    class: \"reset-btn\"\n  }, \"Take Another Quiz\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.goToVocabulary && $options.goToVocabulary(...args)),\n    class: \"vocab-btn\"\n  }, \"Go to Vocabulary\")])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", {\n    class: \"progress\",\n    style: _normalizeStyle({\n      width: `${$data.currentQuestionIndex / $options.totalQuestions * 100}%`\n    })\n  }, null, 4 /* STYLE */)]), _createElementVNode(\"div\", _hoisted_23, \" Question \" + _toDisplayString($data.currentQuestionIndex + 1) + \" of \" + _toDisplayString($options.totalQuestions), 1 /* TEXT */), !$data.showingFeedback ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createElementVNode(\"h3\", null, _toDisplayString($options.questionPrompt), 1 /* TEXT */), $data.quizType === 'meaning-to-japanese' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_createElementVNode(\"p\", _hoisted_26, _toDisplayString($options.currentQuestion.meaning), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.userAnswer = $event),\n    placeholder: \"Enter in Japanese...\",\n    onKeyup: _cache[6] || (_cache[6] = _withKeys((...args) => $options.submitAnswer && $options.submitAnswer(...args), [\"enter\"])),\n    ref: \"answerInput\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userAnswer]])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_27, [_createElementVNode(\"p\", _hoisted_28, [$options.currentQuestion.kanji ? (_openBlock(), _createElementBlock(\"span\", _hoisted_29, _toDisplayString($options.currentQuestion.kanji), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_30, _toDisplayString($options.currentQuestion.kana), 1 /* TEXT */))]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.userAnswer = $event),\n    placeholder: \"Enter meaning in English...\",\n    onKeyup: _cache[8] || (_cache[8] = _withKeys((...args) => $options.submitAnswer && $options.submitAnswer(...args), [\"enter\"])),\n    ref: \"answerInput\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userAnswer]])])), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.submitAnswer && $options.submitAnswer(...args)),\n    class: \"submit-btn\"\n  }, \"Submit\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_31, [_createElementVNode(\"div\", {\n    class: _normalizeClass(['feedback-card', $data.currentFeedback.isCorrect ? 'correct' : 'incorrect'])\n  }, [_createElementVNode(\"div\", _hoisted_32, [$data.currentFeedback.isCorrect ? (_openBlock(), _createElementBlock(\"h3\", _hoisted_33, \"✓ Correct!\")) : (_openBlock(), _createElementBlock(\"h3\", _hoisted_34, \"✗ Incorrect\"))]), _createElementVNode(\"div\", _hoisted_35, [_createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"p\", _hoisted_37, [$options.currentQuestion.kanji ? (_openBlock(), _createElementBlock(\"span\", _hoisted_38, _toDisplayString($options.currentQuestion.kanji) + \" (\" + _toDisplayString($options.currentQuestion.kana) + \")\", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_39, _toDisplayString($options.currentQuestion.kana), 1 /* TEXT */))]), _createElementVNode(\"p\", _hoisted_40, _toDisplayString($options.currentQuestion.meaning), 1 /* TEXT */)]), !$data.currentFeedback.isCorrect ? (_openBlock(), _createElementBlock(\"div\", _hoisted_41, [_createElementVNode(\"p\", null, [_cache[19] || (_cache[19] = _createTextVNode(\"Your answer: \")), _createElementVNode(\"span\", _hoisted_42, _toDisplayString($data.currentFeedback.userAnswer), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[20] || (_cache[20] = _createTextVNode(\"Correct answer: \")), _createElementVNode(\"span\", _hoisted_43, _toDisplayString($data.quizType === 'meaning-to-japanese' ? $options.currentQuestion.kana : $options.currentQuestion.meaning), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true), $options.currentQuestion.examples && $options.currentQuestion.examples.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_44, [_cache[21] || (_cache[21] = _createElementVNode(\"p\", {\n    class: \"example-label\"\n  }, \"Example:\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_45, _toDisplayString($options.currentQuestion.examples[0].japanese), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_46, _toDisplayString($options.currentQuestion.examples[0].english), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = (...args) => $options.nextQuestion && $options.nextQuestion(...args)),\n    class: \"next-btn\"\n  }, _toDisplayString($data.currentQuestionIndex < $options.totalQuestions - 1 ? 'Next Question' : 'View Results'), 1 /* TEXT */)], 2 /* CLASS */)]))]))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$data","loading","_hoisted_2","error","_hoisted_3","_toDisplayString","quizStarted","_hoisted_4","_createElementVNode","_hoisted_5","_hoisted_6","for","id","_cache","$event","quizType","value","_hoisted_7","quizSize","onClick","args","$options","startQuiz","quizComplete","_hoisted_8","_hoisted_9","_hoisted_10","correctAnswers","totalQuestions","_hoisted_11","Math","round","_hoisted_12","_Fragment","_renderList","quizResults","result","index","_normalizeClass","isCorrect","_hoisted_13","word","kanji","_hoisted_14","kana","_hoisted_15","_hoisted_16","meaning","_hoisted_17","_hoisted_18","_hoisted_19","userAnswer","_hoisted_20","resetQuiz","goToVocabulary","_hoisted_21","_hoisted_22","style","_normalizeStyle","width","currentQuestionIndex","_hoisted_23","showingFeedback","_hoisted_24","questionPrompt","_hoisted_25","_hoisted_26","currentQuestion","type","placeholder","onKeyup","_withKeys","submitAnswer","ref","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","currentFeedback","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_createTextVNode","_hoisted_42","_hoisted_43","_createCommentVNode","examples","length","_hoisted_44","_hoisted_45","japanese","_hoisted_46","english","nextQuestion"],"sources":["/Users/sonnet/Documents/4370 Web Programming/ai programming/japanese-learning-app/frontend/src/components/QuizMode.vue"],"sourcesContent":["<template>\n  <div class=\"quiz-container\">\n    <div v-if=\"loading\" class=\"loading\">\n      Loading quiz...\n    </div>\n    \n    <div v-else-if=\"error\" class=\"error\">\n      {{ error }}\n    </div>\n    \n    <div v-else-if=\"!quizStarted\" class=\"quiz-setup\">\n      <h2>Quiz Mode</h2>\n      <p>Test your Japanese vocabulary knowledge!</p>\n      \n      <div class=\"quiz-options\">\n        <div class=\"form-group\">\n          <label for=\"quizType\">Quiz Type</label>\n          <select id=\"quizType\" v-model=\"quizType\">\n            <option value=\"meaning-to-japanese\">English to Japanese</option>\n            <option value=\"japanese-to-meaning\">Japanese to English</option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label for=\"quizSize\">Number of Questions</label>\n          <select id=\"quizSize\" v-model=\"quizSize\">\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"all\">All Words</option>\n          </select>\n        </div>\n      </div>\n      \n      <button @click=\"startQuiz\" class=\"start-btn\">Start Quiz</button>\n    </div>\n    \n    <div v-else-if=\"quizComplete\" class=\"quiz-results\">\n      <h2>Quiz Complete!</h2>\n      \n      <div class=\"score-summary\">\n        <p class=\"score\">Your Score: {{ correctAnswers }} / {{ totalQuestions }}</p>\n        <p class=\"percentage\">{{ Math.round((correctAnswers / totalQuestions) * 100) }}%</p>\n      </div>\n      \n      <div class=\"results-breakdown\">\n        <h3>Results Breakdown</h3>\n        <div v-for=\"(result, index) in quizResults\" :key=\"index\" class=\"result-item\">\n          <div :class=\"['result-card', result.isCorrect ? 'correct' : 'incorrect']\">\n            <p class=\"word\">\n              <span v-if=\"result.word.kanji\">{{ result.word.kanji }} ({{ result.word.kana }})</span>\n              <span v-else>{{ result.word.kana }}</span>\n            </p>\n            <p class=\"meaning\">{{ result.word.meaning }}</p>\n            <p class=\"answer-status\">\n              <span v-if=\"result.isCorrect\">✓ Correct</span>\n              <span v-else>✗ Incorrect (Your answer: {{ result.userAnswer }})</span>\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"quiz-actions\">\n        <button @click=\"resetQuiz\" class=\"reset-btn\">Take Another Quiz</button>\n        <button @click=\"goToVocabulary\" class=\"vocab-btn\">Go to Vocabulary</button>\n      </div>\n    </div>\n    \n    <div v-else class=\"quiz-question\">\n      <div class=\"progress-bar\">\n        <div class=\"progress\" :style=\"{ width: `${(currentQuestionIndex / totalQuestions) * 100}%` }\"></div>\n      </div>\n      \n      <div class=\"question-counter\">\n        Question {{ currentQuestionIndex + 1 }} of {{ totalQuestions }}\n      </div>\n      \n      <div class=\"question\" v-if=\"!showingFeedback\">\n        <h3>{{ questionPrompt }}</h3>\n        \n        <div v-if=\"quizType === 'meaning-to-japanese'\" class=\"question-content\">\n          <p class=\"prompt\">{{ currentQuestion.meaning }}</p>\n          <input \n            type=\"text\" \n            v-model=\"userAnswer\" \n            placeholder=\"Enter in Japanese...\"\n            @keyup.enter=\"submitAnswer\"\n            ref=\"answerInput\"\n          />\n        </div>\n        \n        <div v-else class=\"question-content\">\n          <p class=\"prompt\">\n            <span v-if=\"currentQuestion.kanji\">{{ currentQuestion.kanji }}</span>\n            <span v-else>{{ currentQuestion.kana }}</span>\n          </p>\n          <input \n            type=\"text\" \n            v-model=\"userAnswer\" \n            placeholder=\"Enter meaning in English...\"\n            @keyup.enter=\"submitAnswer\"\n            ref=\"answerInput\"\n          />\n        </div>\n        \n        <button @click=\"submitAnswer\" class=\"submit-btn\">Submit</button>\n      </div>\n      \n      <div class=\"feedback\" v-else>\n        <div :class=\"['feedback-card', currentFeedback.isCorrect ? 'correct' : 'incorrect']\">\n          <div class=\"feedback-header\">\n            <h3 v-if=\"currentFeedback.isCorrect\">✓ Correct!</h3>\n            <h3 v-else>✗ Incorrect</h3>\n          </div>\n          \n          <div class=\"feedback-content\">\n            <div class=\"word-details\">\n              <p class=\"word\">\n                <span v-if=\"currentQuestion.kanji\">{{ currentQuestion.kanji }} ({{ currentQuestion.kana }})</span>\n                <span v-else>{{ currentQuestion.kana }}</span>\n              </p>\n              <p class=\"meaning\">{{ currentQuestion.meaning }}</p>\n            </div>\n            \n            <div class=\"user-answer\" v-if=\"!currentFeedback.isCorrect\">\n              <p>Your answer: <span class=\"incorrect-text\">{{ currentFeedback.userAnswer }}</span></p>\n              <p>Correct answer: <span class=\"correct-text\">{{ quizType === 'meaning-to-japanese' ? currentQuestion.kana : currentQuestion.meaning }}</span></p>\n            </div>\n            \n            <div class=\"example\" v-if=\"currentQuestion.examples && currentQuestion.examples.length\">\n              <p class=\"example-label\">Example:</p>\n              <p class=\"japanese-text\">{{ currentQuestion.examples[0].japanese }}</p>\n              <p class=\"english-text\">{{ currentQuestion.examples[0].english }}</p>\n            </div>\n          </div>\n          \n          <button @click=\"nextQuestion\" class=\"next-btn\">\n            {{ currentQuestionIndex < totalQuestions - 1 ? 'Next Question' : 'View Results' }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { vocabularyService, progressService } from '../services/api';\n\nexport default {\n  name: 'QuizMode',\n  data() {\n    return {\n      loading: false,\n      error: null,\n      quizStarted: false,\n      quizComplete: false,\n      quizType: 'japanese-to-meaning',\n      quizSize: '10',\n      vocabulary: [],\n      quizQuestions: [],\n      currentQuestionIndex: 0,\n      userAnswer: '',\n      quizResults: [],\n      correctAnswers: 0,\n      userId: '1', // Hardcoded for now, should come from authentication\n      showingFeedback: false,\n      currentFeedback: null\n    };\n  },\n  computed: {\n    totalQuestions() {\n      return this.quizQuestions.length;\n    },\n    currentQuestion() {\n      return this.quizQuestions[this.currentQuestionIndex] || {};\n    },\n    questionPrompt() {\n      return this.quizType === 'meaning-to-japanese' \n        ? 'What is the Japanese for:' \n        : 'What is the meaning of:';\n    }\n  },\n  created() {\n    this.fetchVocabulary();\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getAll();\n        this.vocabulary = response.data;\n      } catch (error) {\n        this.error = 'Error loading vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    startQuiz() {\n      if (this.vocabulary.length === 0) {\n        this.error = 'No vocabulary words available for quiz';\n        return;\n      }\n      \n      // Shuffle and select words for quiz\n      const shuffled = [...this.vocabulary].sort(() => 0.5 - Math.random());\n      const questionCount = this.quizSize === 'all' \n        ? this.vocabulary.length \n        : Math.min(parseInt(this.quizSize), this.vocabulary.length);\n        \n      this.quizQuestions = shuffled.slice(0, questionCount);\n      this.quizStarted = true;\n      this.quizComplete = false;\n      this.currentQuestionIndex = 0;\n      this.quizResults = [];\n      this.correctAnswers = 0;\n      this.userAnswer = '';\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n      \n      // Focus on the answer input\n      this.$nextTick(() => {\n        if (this.$refs.answerInput) {\n          this.$refs.answerInput.focus();\n        }\n      });\n    },\n    async submitAnswer() {\n      if (!this.userAnswer.trim() || this.showingFeedback) return;\n      \n      const currentWord = this.currentQuestion;\n      let isCorrect = false;\n      \n      if (this.quizType === 'meaning-to-japanese') {\n        const userAnswerClean = this.userAnswer.trim().toLowerCase();\n        const correctKana = currentWord.kana.toLowerCase();\n        const correctKanji = currentWord.kanji ? currentWord.kanji.toLowerCase() : '';\n        \n        isCorrect = userAnswerClean === correctKana || userAnswerClean === correctKanji;\n      } else {\n        const userAnswerClean = this.userAnswer.trim().toLowerCase();\n        const correctMeaning = currentWord.meaning.toLowerCase();\n        \n        isCorrect = userAnswerClean === correctMeaning;\n      }\n      \n      // Store result\n      const resultItem = {\n        word: currentWord,\n        userAnswer: this.userAnswer,\n        isCorrect\n      };\n      \n      this.quizResults.push(resultItem);\n      this.currentFeedback = resultItem;\n      this.showingFeedback = true;\n      \n      if (isCorrect) {\n        this.correctAnswers++;\n      }\n      \n      // Update user progress in the background\n      this.updateProgress(currentWord._id, isCorrect);\n    },\n    nextQuestion() {\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n      \n      // Move to next question or complete quiz\n      if (this.currentQuestionIndex < this.totalQuestions - 1) {\n        this.currentQuestionIndex++;\n        this.userAnswer = '';\n        \n        // Focus on the answer input for the next question\n        this.$nextTick(() => {\n          if (this.$refs.answerInput) {\n            this.$refs.answerInput.focus();\n          }\n        });\n      } else {\n        this.quizComplete = true;\n      }\n    },\n    async updateProgress(vocabularyId, isCorrect) {\n      try {\n        await progressService.updateProgress({\n          userId: this.userId,\n          vocabularyId,\n          isCorrect\n        });\n      } catch (error) {\n        console.error('Error updating progress:', error);\n      }\n    },\n    resetQuiz() {\n      this.quizStarted = false;\n      this.quizComplete = false;\n      this.quizResults = [];\n      this.showingFeedback = false;\n      this.currentFeedback = null;\n    },\n    goToVocabulary() {\n      this.$router.push('/vocabulary');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.quiz-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.loading, .error {\n  text-align: center;\n  padding: 20px;\n}\n\n.error {\n  color: #f44336;\n}\n\n.quiz-setup {\n  text-align: center;\n}\n\n.quiz-options {\n  max-width: 400px;\n  margin: 20px auto;\n}\n\n.form-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\nselect {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.start-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 12px 30px;\n  font-size: 18px;\n  cursor: pointer;\n}\n\n.start-btn:hover {\n  background-color: #45a049;\n}\n\n.quiz-question {\n  text-align: center;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 10px;\n  background-color: #f2f2f2;\n  border-radius: 5px;\n  margin-bottom: 20px;\n  overflow: hidden;\n}\n\n.progress {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.question-counter {\n  margin-bottom: 20px;\n  font-size: 16px;\n  color: #666;\n}\n\n.question h3 {\n  margin-bottom: 30px;\n}\n\n.question-content {\n  margin-bottom: 20px;\n}\n\n.prompt {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\ninput {\n  width: 100%;\n  max-width: 400px;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 18px;\n  margin-bottom: 20px;\n}\n\n.submit-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 25px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.submit-btn:hover {\n  background-color: #0b7dda;\n}\n\n/* Feedback Styles */\n.feedback {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.feedback-card {\n  width: 100%;\n  max-width: 600px;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  margin: 0 auto;\n  animation: fadeInUp 0.4s ease-out;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.feedback-card.correct {\n  border: 2px solid #4CAF50;\n}\n\n.feedback-card.incorrect {\n  border: 2px solid #f44336;\n}\n\n.feedback-header {\n  padding: 15px;\n  color: white;\n}\n\n.feedback-card.correct .feedback-header {\n  background-color: #4CAF50;\n}\n\n.feedback-card.incorrect .feedback-header {\n  background-color: #f44336;\n}\n\n.feedback-header h3 {\n  margin: 0;\n  font-size: 20px;\n}\n\n.feedback-content {\n  padding: 20px;\n  background-color: white;\n}\n\n.word-details {\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid #eee;\n}\n\n.word {\n  font-size: 22px;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.meaning {\n  font-size: 18px;\n  color: #555;\n}\n\n.user-answer {\n  margin: 15px 0;\n  padding: 15px;\n  background-color: #f9f9f9;\n  border-radius: 4px;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n}\n\n.example {\n  margin-top: 20px;\n  padding-top: 15px;\n  border-top: 1px solid #eee;\n}\n\n.example-label {\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\n.japanese-text {\n  font-size: 18px;\n  margin-bottom: 5px;\n}\n\n.english-text {\n  color: #666;\n}\n\n.next-btn {\n  display: block;\n  width: 100%;\n  padding: 15px;\n  border: none;\n  background-color: var(--kageyama-blue, #1A3263);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.next-btn:hover {\n  background-color: #142851;\n}\n\n.quiz-results {\n  text-align: center;\n}\n\n.score-summary {\n  margin: 30px 0;\n}\n\n.score {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.percentage {\n  font-size: 36px;\n  font-weight: bold;\n  color: #4CAF50;\n}\n\n.results-breakdown {\n  margin: 30px 0;\n  text-align: left;\n}\n\n.result-item {\n  margin-bottom: 15px;\n}\n\n.result-card {\n  padding: 15px;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n}\n\n.result-card.correct {\n  border-left: 5px solid #4CAF50;\n}\n\n.result-card.incorrect {\n  border-left: 5px solid #f44336;\n}\n\n.answer-status {\n  margin-top: 10px;\n  font-style: italic;\n}\n\n.quiz-actions {\n  margin-top: 30px;\n}\n\n.reset-btn, .vocab-btn {\n  margin: 0 10px;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.reset-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.reset-btn:hover {\n  background-color: #0b7dda;\n}\n\n.vocab-btn {\n  background-color: #9E9E9E;\n  color: white;\n}\n\n.vocab-btn:hover {\n  background-color: #757575;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAD7BC,GAAA;EAEwBD,KAAK,EAAC;;;EAF9BC,GAAA;EAM2BD,KAAK,EAAC;;;EANjCC,GAAA;EAUkCD,KAAK,EAAC;;;EAI7BA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAY;;EAQlBA,KAAK,EAAC;AAAY;;EAvB/BC,GAAA;EAqCkCD,KAAK,EAAC;;;EAG7BA,KAAK,EAAC;AAAe;;EACrBA,KAAK,EAAC;AAAO;;EACbA,KAAK,EAAC;AAAY;;EAGlBA,KAAK,EAAC;AAAmB;;EAIrBA,KAAK,EAAC;AAAM;;EAjD3BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAqDeD,KAAK,EAAC;AAAS;;EACfA,KAAK,EAAC;AAAe;;EAtDpCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EA8DWD,KAAK,EAAC;AAAc;;EA9D/BC,GAAA;EAoEgBD,KAAK,EAAC;;;EACXA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAkB;;EAzEnCC,GAAA;EA6EWD,KAAK,EAAC;;;EA7EjBC,GAAA;EAgFuDD,KAAK,EAAC;;;EAChDA,KAAK,EAAC;AAAQ;;EAjF3BC,GAAA;EA2FoBD,KAAK,EAAC;;;EACbA,KAAK,EAAC;AAAQ;;EA5F3BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EA4GWD,KAAK,EAAC;;;EAEFA,KAAK,EAAC;AAAiB;;EA9GtCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAmHeD,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAM;;EArH7BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAyHiBD,KAAK,EAAC;AAAS;;EAzHhCC,GAAA;EA4HiBD,KAAK,EAAC;;;EACaA,KAAK,EAAC;AAAgB;;EACnBA,KAAK,EAAC;AAAc;;EA9H3DC,GAAA;EAiIiBD,KAAK,EAAC;;;EAENA,KAAK,EAAC;AAAe;;EACrBA,KAAK,EAAC;AAAc;;uBAnInCE,mBAAA,CA6IM,OA7INC,UA6IM,GA5IOC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAEM,OAFNI,UAEM,EAF8B,mBAEpC,KAEgBF,KAAA,CAAAG,KAAK,I,cAArBL,mBAAA,CAEM,OAFNM,UAEM,EAAAC,gBAAA,CADDL,KAAA,CAAAG,KAAK,oB,CAGOH,KAAA,CAAAM,WAAW,I,cAA5BR,mBAAA,CAyBM,OAzBNS,UAyBM,G,4BAxBJC,mBAAA,CAAkB,YAAd,WAAS,sB,4BACbA,mBAAA,CAA+C,WAA5C,0CAAwC,sBAE3CA,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJD,mBAAA,CAMM,OANNE,UAMM,G,4BALJF,mBAAA,CAAuC;IAAhCG,GAAG,EAAC;EAAU,GAAC,WAAS,sB,gBAC/BH,mBAAA,CAGS;IAHDI,EAAE,EAAC,UAAU;IAjB/B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiByCd,KAAA,CAAAe,QAAQ,GAAAD,MAAA;kCACrCN,mBAAA,CAAgE;IAAxDQ,KAAK,EAAC;EAAqB,GAAC,qBAAmB,qBACvDR,mBAAA,CAAgE;IAAxDQ,KAAK,EAAC;EAAqB,GAAC,qBAAmB,oB,2CAF1BhB,KAAA,CAAAe,QAAQ,E,KAMzCP,mBAAA,CAQM,OARNS,UAQM,G,4BAPJT,mBAAA,CAAiD;IAA1CG,GAAG,EAAC;EAAU,GAAC,qBAAmB,sB,gBACzCH,mBAAA,CAKS;IALDI,EAAE,EAAC,UAAU;IAzB/B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAyByCd,KAAA,CAAAkB,QAAQ,GAAAJ,MAAA;kCACrCN,mBAAA,CAA4B;IAApBQ,KAAK,EAAC;EAAG,GAAC,GAAC,qBACnBR,mBAAA,CAA8B;IAAtBQ,KAAK,EAAC;EAAI,GAAC,IAAE,qBACrBR,mBAAA,CAA8B;IAAtBQ,KAAK,EAAC;EAAI,GAAC,IAAE,qBACrBR,mBAAA,CAAsC;IAA9BQ,KAAK,EAAC;EAAK,GAAC,WAAS,oB,2CAJAhB,KAAA,CAAAkB,QAAQ,E,OAS3CV,mBAAA,CAAgE;IAAvDW,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;IAAExB,KAAK,EAAC;KAAY,YAAU,E,KAGzCI,KAAA,CAAAuB,YAAY,I,cAA5BzB,mBAAA,CA6BM,OA7BN0B,UA6BM,G,4BA5BJhB,mBAAA,CAAuB,YAAnB,gBAAc,sBAElBA,mBAAA,CAGM,OAHNiB,UAGM,GAFJjB,mBAAA,CAA4E,KAA5EkB,WAA4E,EAA3D,cAAY,GAAArB,gBAAA,CAAGL,KAAA,CAAA2B,cAAc,IAAG,KAAG,GAAAtB,gBAAA,CAAGgB,QAAA,CAAAO,cAAc,kBACrEpB,mBAAA,CAAoF,KAApFqB,WAAoF,EAAAxB,gBAAA,CAA3DyB,IAAI,CAACC,KAAK,CAAE/B,KAAA,CAAA2B,cAAc,GAAGN,QAAA,CAAAO,cAAc,WAAW,GAAC,gB,GAGlFpB,mBAAA,CAeM,OAfNwB,WAeM,G,4BAdJxB,mBAAA,CAA0B,YAAtB,mBAAiB,uB,kBACrBV,mBAAA,CAYMmC,SAAA,QA3DdC,WAAA,CA+CuClC,KAAA,CAAAmC,WAAW,EA/ClD,CA+CqBC,MAAM,EAAEC,KAAK;yBAA1BvC,mBAAA,CAYM;MAZuCD,GAAG,EAAEwC,KAAK;MAAEzC,KAAK,EAAC;QAC7DY,mBAAA,CAUM;MAVAZ,KAAK,EAhDrB0C,eAAA,iBAgDuCF,MAAM,CAACG,SAAS;QAC3C/B,mBAAA,CAGI,KAHJgC,WAGI,GAFUJ,MAAM,CAACK,IAAI,CAACC,KAAK,I,cAA7B5C,mBAAA,CAAsF,QAlDpG6C,WAAA,EAAAtC,gBAAA,CAkDgD+B,MAAM,CAACK,IAAI,CAACC,KAAK,IAAG,IAAE,GAAArC,gBAAA,CAAG+B,MAAM,CAACK,IAAI,CAACG,IAAI,IAAG,GAAC,oB,cAC/E9C,mBAAA,CAA0C,QAnDxD+C,WAAA,EAAAxC,gBAAA,CAmD8B+B,MAAM,CAACK,IAAI,CAACG,IAAI,kB,GAElCpC,mBAAA,CAAgD,KAAhDsC,WAAgD,EAAAzC,gBAAA,CAA1B+B,MAAM,CAACK,IAAI,CAACM,OAAO,kBACzCvC,mBAAA,CAGI,KAHJwC,WAGI,GAFUZ,MAAM,CAACG,SAAS,I,cAA5BzC,mBAAA,CAA8C,QAvD5DmD,WAAA,EAuD4C,WAAS,M,cACvCnD,mBAAA,CAAsE,QAxDpFoD,WAAA,EAwD2B,4BAA0B,GAAA7C,gBAAA,CAAG+B,MAAM,CAACe,UAAU,IAAG,GAAC,iB;oCAMvE3C,mBAAA,CAGM,OAHN4C,WAGM,GAFJ5C,mBAAA,CAAuE;IAA9DW,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAgC,SAAA,IAAAhC,QAAA,CAAAgC,SAAA,IAAAjC,IAAA,CAAS;IAAExB,KAAK,EAAC;KAAY,mBAAiB,GAC9DY,mBAAA,CAA2E;IAAlEW,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAiC,cAAA,IAAAjC,QAAA,CAAAiC,cAAA,IAAAlC,IAAA,CAAc;IAAExB,KAAK,EAAC;KAAY,kBAAgB,E,sBAItEE,mBAAA,CAyEM,OAzENyD,WAyEM,GAxEJ/C,mBAAA,CAEM,OAFNgD,WAEM,GADJhD,mBAAA,CAAoG;IAA/FZ,KAAK,EAAC,UAAU;IAAE6D,KAAK,EAtEpCC,eAAA;MAAAC,KAAA,KAsEmD3D,KAAA,CAAA4D,oBAAoB,GAAGvC,QAAA,CAAAO,cAAc;IAAA;6BAGlFpB,mBAAA,CAEM,OAFNqD,WAEM,EAFwB,YACnB,GAAAxD,gBAAA,CAAGL,KAAA,CAAA4D,oBAAoB,QAAO,MAAI,GAAAvD,gBAAA,CAAGgB,QAAA,CAAAO,cAAc,kB,CAGjC5B,KAAA,CAAA8D,eAAe,I,cAA5ChE,mBAAA,CA6BM,OA7BNiE,WA6BM,GA5BJvD,mBAAA,CAA6B,YAAAH,gBAAA,CAAtBgB,QAAA,CAAA2C,cAAc,kBAEVhE,KAAA,CAAAe,QAAQ,8B,cAAnBjB,mBAAA,CASM,OATNmE,WASM,GARJzD,mBAAA,CAAmD,KAAnD0D,WAAmD,EAAA7D,gBAAA,CAA9BgB,QAAA,CAAA8C,eAAe,CAACpB,OAAO,kB,gBAC5CvC,mBAAA,CAME;IALA4D,IAAI,EAAC,MAAM;IAnFvB,uBAAAvD,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAoFqBd,KAAA,CAAAmD,UAAU,GAAArC,MAAA;IACnBuD,WAAW,EAAC,sBAAsB;IACjCC,OAAK,EAAAzD,MAAA,QAAAA,MAAA,MAtFlB0D,SAAA,KAAAnD,IAAA,KAsF0BC,QAAA,CAAAmD,YAAA,IAAAnD,QAAA,CAAAmD,YAAA,IAAApD,IAAA,CAAY;IAC1BqD,GAAG,EAAC;iEAHKzE,KAAA,CAAAmD,UAAU,E,sBAOvBrD,mBAAA,CAYM,OAZN4E,WAYM,GAXJlE,mBAAA,CAGI,KAHJmE,WAGI,GAFUtD,QAAA,CAAA8C,eAAe,CAACzB,KAAK,I,cAAjC5C,mBAAA,CAAqE,QA7FjF8E,WAAA,EAAAvE,gBAAA,CA6FkDgB,QAAA,CAAA8C,eAAe,CAACzB,KAAK,qB,cAC3D5C,mBAAA,CAA8C,QA9F1D+E,WAAA,EAAAxE,gBAAA,CA8F4BgB,QAAA,CAAA8C,eAAe,CAACvB,IAAI,kB,mBAEtCpC,mBAAA,CAME;IALA4D,IAAI,EAAC,MAAM;IAjGvB,uBAAAvD,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAkGqBd,KAAA,CAAAmD,UAAU,GAAArC,MAAA;IACnBuD,WAAW,EAAC,6BAA6B;IACxCC,OAAK,EAAAzD,MAAA,QAAAA,MAAA,MApGlB0D,SAAA,KAAAnD,IAAA,KAoG0BC,QAAA,CAAAmD,YAAA,IAAAnD,QAAA,CAAAmD,YAAA,IAAApD,IAAA,CAAY;IAC1BqD,GAAG,EAAC;iEAHKzE,KAAA,CAAAmD,UAAU,E,MAOvB3C,mBAAA,CAAgE;IAAvDW,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAmD,YAAA,IAAAnD,QAAA,CAAAmD,YAAA,IAAApD,IAAA,CAAY;IAAExB,KAAK,EAAC;KAAa,QAAM,E,oBAGzDE,mBAAA,CAgCM,OAhCNgF,WAgCM,GA/BJtE,mBAAA,CA8BM;IA9BAZ,KAAK,EA7GnB0C,eAAA,mBA6GuCtC,KAAA,CAAA+E,eAAe,CAACxC,SAAS;MACtD/B,mBAAA,CAGM,OAHNwE,WAGM,GAFMhF,KAAA,CAAA+E,eAAe,CAACxC,SAAS,I,cAAnCzC,mBAAA,CAAoD,MA/GhEmF,WAAA,EA+GiD,YAAU,M,cAC/CnF,mBAAA,CAA2B,MAhHvCoF,WAAA,EAgHuB,aAAW,G,GAGxB1E,mBAAA,CAmBM,OAnBN2E,WAmBM,GAlBJ3E,mBAAA,CAMM,OANN4E,WAMM,GALJ5E,mBAAA,CAGI,KAHJ6E,WAGI,GAFUhE,QAAA,CAAA8C,eAAe,CAACzB,KAAK,I,cAAjC5C,mBAAA,CAAkG,QAtHlHwF,WAAA,EAAAjF,gBAAA,CAsHsDgB,QAAA,CAAA8C,eAAe,CAACzB,KAAK,IAAG,IAAE,GAAArC,gBAAA,CAAGgB,QAAA,CAAA8C,eAAe,CAACvB,IAAI,IAAG,GAAC,oB,cAC3F9C,mBAAA,CAA8C,QAvH9DyF,WAAA,EAAAlF,gBAAA,CAuHgCgB,QAAA,CAAA8C,eAAe,CAACvB,IAAI,kB,GAEtCpC,mBAAA,CAAoD,KAApDgF,WAAoD,EAAAnF,gBAAA,CAA9BgB,QAAA,CAAA8C,eAAe,CAACpB,OAAO,iB,IAGf/C,KAAA,CAAA+E,eAAe,CAACxC,SAAS,I,cAAzDzC,mBAAA,CAGM,OAHN2F,WAGM,GAFJjF,mBAAA,CAAwF,Y,4BA7HtGkF,gBAAA,CA6HiB,eAAa,IAAAlF,mBAAA,CAAoE,QAApEmF,WAAoE,EAAAtF,gBAAA,CAApCL,KAAA,CAAA+E,eAAe,CAAC5B,UAAU,iB,GAC1E3C,mBAAA,CAAkJ,Y,4BA9HhKkF,gBAAA,CA8HiB,kBAAgB,IAAAlF,mBAAA,CAA2H,QAA3HoF,WAA2H,EAAAvF,gBAAA,CAA7FL,KAAA,CAAAe,QAAQ,6BAA6BM,QAAA,CAAA8C,eAAe,CAACvB,IAAI,GAAGvB,QAAA,CAAA8C,eAAe,CAACpB,OAAO,iB,OA9HlJ8C,mBAAA,gBAiIuCxE,QAAA,CAAA8C,eAAe,CAAC2B,QAAQ,IAAIzE,QAAA,CAAA8C,eAAe,CAAC2B,QAAQ,CAACC,MAAM,I,cAAtFjG,mBAAA,CAIM,OAJNkG,WAIM,G,4BAHJxF,mBAAA,CAAqC;IAAlCZ,KAAK,EAAC;EAAe,GAAC,UAAQ,sBACjCY,mBAAA,CAAuE,KAAvEyF,WAAuE,EAAA5F,gBAAA,CAA3CgB,QAAA,CAAA8C,eAAe,CAAC2B,QAAQ,IAAII,QAAQ,kBAChE1F,mBAAA,CAAqE,KAArE2F,WAAqE,EAAA9F,gBAAA,CAA1CgB,QAAA,CAAA8C,eAAe,CAAC2B,QAAQ,IAAIM,OAAO,iB,KApI5EP,mBAAA,e,GAwIUrF,mBAAA,CAES;IAFAW,OAAK,EAAAN,MAAA,SAAAA,MAAA,WAAAO,IAAA,KAAEC,QAAA,CAAAgF,YAAA,IAAAhF,QAAA,CAAAgF,YAAA,IAAAjF,IAAA,CAAY;IAAExB,KAAK,EAAC;sBAC/BI,KAAA,CAAA4D,oBAAoB,GAAGvC,QAAA,CAAAO,cAAc,wD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}