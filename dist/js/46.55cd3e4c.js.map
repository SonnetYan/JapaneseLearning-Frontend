{"version":3,"file":"js/46.55cd3e4c.js","mappings":"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","sources":["webpack://frontend/./src/views/FlashcardView.vue","webpack://frontend/./src/views/FlashcardView.vue?5be3"],"sourcesContent":["<template>\n  <div class=\"flashcard-view\">\n    <h1>Flashcard Review</h1>\n    \n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n    \n    <div v-else-if=\"error\" class=\"error\">{{ error }}</div>\n    \n    <div v-else-if=\"!flashcardStarted\" class=\"flashcard-setup\">\n      <h2>Flashcard Options</h2>\n      \n      <div class=\"form-group\">\n        <label for=\"flashcard-type\">Flashcard Type</label>\n        <select id=\"flashcard-type\" v-model=\"flashcardType\">\n          <option value=\"japanese-to-meaning\">Japanese to Meaning</option>\n          <option value=\"meaning-to-japanese\">Meaning to Japanese</option>\n          <option value=\"mixed\">Mixed (Both Directions)</option>\n        </select>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"flashcard-source\">Flashcard Source</label>\n        <select id=\"flashcard-source\" v-model=\"flashcardSource\">\n          <option value=\"all\">All Vocabulary</option>\n          <option value=\"due\">Due for Review</option>\n        </select>\n      </div>\n      \n      <div v-if=\"flashcardSource === 'all'\" class=\"form-group\">\n        <label for=\"flashcard-count\">Number of Flashcards</label>\n        <select id=\"flashcard-count\" v-model=\"flashcardCount\">\n          <option value=\"10\">10</option>\n          <option value=\"20\">20</option>\n          <option value=\"30\">30</option>\n          <option value=\"all\">All</option>\n        </select>\n      </div>\n      \n      <button @click=\"startFlashcards\" class=\"start-btn\">Start Flashcards</button>\n    </div>\n    \n    <div v-else-if=\"flashcardStarted && !flashcardComplete\" class=\"flashcard-session\">\n      <div class=\"progress-bar\">\n        <div class=\"progress\" :style=\"{ width: `${(currentCardIndex / flashcards.length) * 100}%` }\"></div>\n        <div class=\"progress-text\">{{ currentCardIndex }} / {{ flashcards.length }}</div>\n      </div>\n      \n      <transition :name=\"slideDirection\" mode=\"out-in\">\n        <div \n          :key=\"currentCardIndex\"\n          class=\"flashcard-container\"\n          @click=\"flipCard\"\n        >\n          <div \n            class=\"flashcard\" \n            :class=\"{ flipped: cardFlipped }\"\n          >\n            <div class=\"flashcard-front\">\n              <div v-if=\"currentDirection === 'japanese-to-meaning'\" class=\"japanese\">\n                <div v-if=\"currentCard.kanji\" class=\"kanji\">{{ currentCard.kanji }}</div>\n                <div class=\"kana\">{{ currentCard.kana }}</div>\n              </div>\n              <div v-else class=\"meaning\">\n                {{ currentCard.meaning }}\n              </div>\n            </div>\n            \n            <div class=\"flashcard-back\">\n              <div v-if=\"currentDirection === 'japanese-to-meaning'\" class=\"meaning\">\n                {{ currentCard.meaning }}\n              </div>\n              <div v-else class=\"japanese\">\n                <div v-if=\"currentCard.kanji\" class=\"kanji\">{{ currentCard.kanji }}</div>\n                <div class=\"kana\">{{ currentCard.kana }}</div>\n              </div>\n              \n              <div v-if=\"currentCard.examples && currentCard.examples.length\" class=\"examples\">\n                <div class=\"example\">\n                  <div class=\"japanese-example\">{{ currentCard.examples[0].japanese }}</div>\n                  <div class=\"english-example\">{{ currentCard.examples[0].english }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </transition>\n      \n      <div v-if=\"cardFlipped\" class=\"flashcard-actions\">\n        <button @click=\"rateCard('hard')\" class=\"hard-btn\">Hard</button>\n        <button @click=\"rateCard('good')\" class=\"good-btn\">Good</button>\n        <button @click=\"rateCard('easy')\" class=\"easy-btn\">Easy</button>\n      </div>\n    </div>\n    \n    <div v-else class=\"flashcard-complete\">\n      <h2>Flashcard Session Complete!</h2>\n      \n      <div class=\"stats\">\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Total Cards:</span>\n          <span class=\"stat-value\">{{ flashcards.length }}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Easy:</span>\n          <span class=\"stat-value\">{{ stats.easy }}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Good:</span>\n          <span class=\"stat-value\">{{ stats.good }}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Hard:</span>\n          <span class=\"stat-value\">{{ stats.hard }}</span>\n        </div>\n      </div>\n      \n      <div class=\"flashcard-complete-actions\">\n        <button @click=\"resetFlashcards\" class=\"reset-btn\">Start New Session</button>\n        <router-link to=\"/vocabulary\" class=\"vocab-btn\">Back to Vocabulary</router-link>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { vocabularyService, progressService } from '../services/api';\n\nexport default {\n  name: 'FlashcardView',\n  data() {\n    return {\n      loading: false,\n      error: null,\n      vocabulary: [],\n      dueForReview: [],\n      flashcardStarted: false,\n      flashcardComplete: false,\n      flashcardType: 'japanese-to-meaning',\n      flashcardSource: 'all',\n      flashcardCount: '10',\n      flashcards: [],\n      currentCardIndex: 0,\n      cardFlipped: false,\n      currentDirection: 'japanese-to-meaning',\n      stats: {\n        easy: 0,\n        good: 0,\n        hard: 0\n      },\n      userId: '1', // Hardcoded for now, should come from authentication\n      isTransitioning: false,\n      slideDirection: 'card-slide-left'\n    };\n  },\n  computed: {\n    currentCard() {\n      return this.flashcards[this.currentCardIndex] || {};\n    }\n  },\n  created() {\n    this.fetchVocabulary();\n    this.fetchDueWords();\n  },\n  methods: {\n    async fetchVocabulary() {\n      this.loading = true;\n      try {\n        const response = await vocabularyService.getAll();\n        this.vocabulary = response.data;\n      } catch (error) {\n        this.error = 'Error loading vocabulary: ' + error.message;\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchDueWords() {\n      try {\n        const response = await progressService.getReviewWords(this.userId);\n        this.dueForReview = response.data.map(item => item.vocabularyId);\n      } catch (error) {\n        console.error('Error fetching due words:', error);\n        // Fallback to all vocabulary if there's an error\n        this.dueForReview = [];\n      }\n    },\n    startFlashcards() {\n      let wordPool = [];\n      \n      // Determine which words to use\n      if (this.flashcardSource === 'due' && this.dueForReview.length > 0) {\n        wordPool = this.dueForReview;\n      } else {\n        wordPool = this.vocabulary;\n      }\n      \n      if (wordPool.length === 0) {\n        this.error = 'No vocabulary words available for flashcards';\n        return;\n      }\n      \n      // Shuffle the words\n      const shuffled = [...wordPool].sort(() => 0.5 - Math.random());\n      \n      // Select the number of words\n      const cardCount = this.flashcardCount === 'all' \n        ? wordPool.length \n        : Math.min(parseInt(this.flashcardCount), wordPool.length);\n      \n      this.flashcards = shuffled.slice(0, cardCount);\n      \n      // Prepare cards with directions\n      if (this.flashcardType === 'mixed') {\n        // For mixed, we'll set the direction for each card\n        this.flashcards = this.flashcards.map(card => ({\n          ...card,\n          direction: Math.random() > 0.5 ? 'japanese-to-meaning' : 'meaning-to-japanese'\n        }));\n        // Set initial direction\n        this.currentDirection = this.flashcards[0].direction;\n      } else {\n        // Otherwise, all cards use the same direction\n        this.currentDirection = this.flashcardType;\n      }\n      \n      // Reset session stats\n      this.currentCardIndex = 0;\n      this.cardFlipped = false;\n      this.flashcardStarted = true;\n      this.flashcardComplete = false;\n      this.stats = {\n        easy: 0,\n        good: 0,\n        hard: 0\n      };\n      this.slideDirection = 'card-slide-left';\n    },\n    flipCard() {\n      if (!this.cardFlipped && !this.isTransitioning) {\n        this.cardFlipped = true;\n      }\n    },\n    async rateCard(difficulty) {\n      if (this.isTransitioning) return;\n      this.isTransitioning = true;\n      \n      // Update stats\n      this.stats[difficulty]++;\n      \n      // Calculate new status based on difficulty\n      let newStatus;\n      let isCorrect = true;\n      \n      switch (difficulty) {\n        case 'easy':\n          newStatus = 'mastered';\n          break;\n        case 'good':\n          newStatus = 'reviewing';\n          break;\n        case 'hard':\n          newStatus = 'learning';\n          isCorrect = false;\n          break;\n        default:\n          newStatus = 'learning';\n      }\n      \n      // Update progress in the backend\n      try {\n        await progressService.updateProgress({\n          userId: this.userId,\n          vocabularyId: this.currentCard._id,\n          status: newStatus,\n          isCorrect\n        });\n      } catch (error) {\n        console.error('Error updating progress:', error);\n      }\n      \n      // Check if we've reached the end\n      if (this.currentCardIndex >= this.flashcards.length - 1) {\n        // We've reached the end\n        this.flashcardComplete = true;\n        this.isTransitioning = false;\n        return;\n      }\n      \n      // Move to next card - now we don't flip back, we just let the card slide away\n      this.slideDirection = 'card-slide-left';\n      \n      // Use setTimeout to ensure the card slide transition completes before moving to the next card\n      setTimeout(() => {\n        this.currentCardIndex++;\n        \n        // Update direction for next card if mixed\n        if (this.flashcardType === 'mixed') {\n          this.currentDirection = this.flashcards[this.currentCardIndex].direction;\n        }\n        \n        // Reset flip state for the next card\n        this.cardFlipped = false;\n        this.isTransitioning = false;\n      }, 300); // This delay should be equal to or slightly less than the CSS transition time\n    },\n    resetFlashcards() {\n      this.flashcardStarted = false;\n      this.flashcardComplete = false;\n      this.currentCardIndex = 0;\n      this.cardFlipped = false;\n      this.isTransitioning = false;\n      \n      // Refresh the due words\n      this.fetchDueWords();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.flashcard-view {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1 {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.loading, .error {\n  text-align: center;\n  padding: 40px;\n}\n\n.error {\n  color: #f44336;\n}\n\n.flashcard-setup {\n  background-color: #f5f5f5;\n  padding: 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\nselect {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.start-btn, .reset-btn, .vocab-btn {\n  display: block;\n  width: 100%;\n  padding: 12px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.start-btn {\n  background-color: var(--hinata-orange, #F5A623);\n  color: white;\n}\n\n.start-btn:hover {\n  opacity: 0.9;\n}\n\n.progress-bar {\n  height: 10px;\n  background-color: #eee;\n  border-radius: 5px;\n  margin-bottom: 20px;\n  position: relative;\n}\n\n.progress {\n  height: 100%;\n  background-color: var(--hinata-orange, #F5A623);\n  border-radius: 5px;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  position: absolute;\n  right: 0;\n  top: -20px;\n  font-size: 14px;\n  color: #666;\n}\n\n/* Improved card transitions */\n.card-slide-left-enter-active,\n.card-slide-left-leave-active {\n  transition: all 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);\n  position: relative;\n}\n\n.card-slide-left-enter-from {\n  opacity: 0;\n  transform: translateX(80px);\n}\n\n.card-slide-left-leave-to {\n  opacity: 0;\n  transform: translateX(-80px);\n}\n\n.flashcard-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  cursor: pointer;\n  will-change: transform, opacity;\n  perspective: 2000px;\n}\n\n.flashcard {\n  position: relative;\n  width: 500px;\n  max-width: 100%;\n  height: 300px;\n  transform-style: preserve-3d;\n  transition: transform 0.1s;\n  will-change: transform;\n}\n\n.flashcard:hover {\n  transform: scale(1.02);\n}\n\n.flashcard-front, .flashcard-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  transform-style: preserve-3d;\n  border-radius: 16px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  overflow: hidden;\n  will-change: transform;\n}\n\n.flashcard-front {\n  background-color: var(--kageyama-blue, #1A3263);\n  color: white;\n  z-index: 2;\n  transform: rotateY(0deg);\n}\n\n.flashcard-back {\n  background-color: white;\n  border: 2px solid var(--kageyama-blue, #1A3263);\n  color: #333;\n  transform: rotateY(180deg);\n}\n\n.flashcard.flipped .flashcard-front {\n  transform: rotateY(180deg);\n}\n\n.flashcard.flipped .flashcard-back {\n  transform: rotateY(0deg);\n}\n\n.kanji {\n  font-size: 3rem;\n  margin-bottom: 10px;\n  opacity: 0;\n  transform: translateY(20px);\n  animation: fadeUpIn 0.5s forwards;\n}\n\n.kana {\n  font-size: 1.8rem;\n  opacity: 0;\n  transform: translateY(20px);\n  animation: fadeUpIn 0.5s 0.1s forwards;\n}\n\n.meaning {\n  font-size: 2rem;\n  text-align: center;\n  opacity: 0;\n  transform: translateY(20px);\n  animation: fadeUpIn 0.5s 0.2s forwards;\n}\n\n@keyframes fadeUpIn {\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.examples {\n  margin-top: 20px;\n  width: 100%;\n  opacity: 0;\n  animation: fadeIn 0.5s 0.3s forwards;\n}\n\n@keyframes fadeIn {\n  to {\n    opacity: 1;\n  }\n}\n\n.example {\n  border-top: 1px solid #eee;\n  padding-top: 15px;\n  text-align: center;\n}\n\n.japanese-example {\n  font-size: 1.2rem;\n  margin-bottom: 5px;\n}\n\n.english-example {\n  color: #666;\n}\n\n.flashcard-actions {\n  display: flex;\n  justify-content: space-between;\n  max-width: 500px;\n  margin: 0 auto;\n}\n\n.hard-btn, .good-btn, .easy-btn {\n  flex: 1;\n  padding: 12px;\n  border: none;\n  font-weight: bold;\n  cursor: pointer;\n  margin: 0 5px;\n  border-radius: 4px;\n  transition: transform 0.2s, opacity 0.2s;\n}\n\n.hard-btn:hover, .good-btn:hover, .easy-btn:hover {\n  transform: translateY(-3px);\n  opacity: 0.9;\n}\n\n.hard-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.good-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.easy-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.flashcard-complete {\n  text-align: center;\n}\n\n.stats {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n}\n\n.stat-item {\n  background-color: #f5f5f5;\n  padding: 15px;\n  border-radius: 8px;\n  flex: 1;\n  margin: 0 5px;\n}\n\n.stat-label {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  color: var(--hinata-orange, #F5A623);\n}\n\n.flashcard-complete-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 30px;\n}\n\n.reset-btn, .vocab-btn {\n  flex: 1;\n  margin: 0 10px;\n}\n\n.reset-btn {\n  background-color: var(--hinata-orange, #F5A623);\n  color: white;\n}\n\n.vocab-btn {\n  background-color: var(--kageyama-blue, #1A3263);\n  color: white;\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n@media (max-width: 600px) {\n  .flashcard {\n    width: 100%;\n    height: 250px;\n  }\n  \n  .kanji {\n    font-size: 2.5rem;\n  }\n  \n  .kana {\n    font-size: 1.5rem;\n  }\n  \n  .meaning {\n    font-size: 1.8rem;\n  }\n}\n</style> ","import { render } from \"./FlashcardView.vue?vue&type=template&id=13d7c332&scoped=true\"\nimport script from \"./FlashcardView.vue?vue&type=script&lang=js\"\nexport * from \"./FlashcardView.vue?vue&type=script&lang=js\"\n\nimport \"./FlashcardView.vue?vue&type=style&index=0&id=13d7c332&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-13d7c332\"]])\n\nexport default __exports__"],"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","loading","_hoisted_2","error","_hoisted_3","_toDisplayString","flashcardStarted","flashcardComplete","_hoisted_8","_hoisted_9","style","_normalizeStyle","width","currentCardIndex","flashcards","length","_hoisted_10","_createVNode","_Transition","name","slideDirection","mode","default","_withCtx","onClick","_cache","args","$options","flipCard","_normalizeClass","flipped","cardFlipped","_hoisted_11","currentDirection","_hoisted_12","currentCard","kanji","_hoisted_13","_createCommentVNode","_hoisted_14","kana","_hoisted_15","meaning","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","examples","_hoisted_21","_hoisted_22","_hoisted_23","japanese","_hoisted_24","english","_","_hoisted_25","$event","rateCard","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","stats","easy","_hoisted_32","_hoisted_33","good","_hoisted_34","_hoisted_35","hard","_hoisted_36","resetFlashcards","_component_router_link","to","_createTextVNode","_hoisted_4","_hoisted_5","for","id","flashcardType","value","_hoisted_6","flashcardSource","_hoisted_7","flashcardCount","startFlashcards","data","vocabulary","dueForReview","userId","isTransitioning","computed","this","created","fetchVocabulary","fetchDueWords","methods","response","vocabularyService","getAll","message","console","progressService","getReviewWords","map","item","vocabularyId","wordPool","shuffled","sort","Math","random","cardCount","min","parseInt","slice","card","direction","difficulty","newStatus","isCorrect","updateProgress","_id","status","setTimeout","__exports__","render"],"sourceRoot":""}