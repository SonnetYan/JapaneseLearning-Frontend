{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(response => response, error => {\n  if (error.message === 'Network Error') {\n    console.error('CORS or network issue detected:', error);\n    // You can add custom handling here, like showing a user-friendly message\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to handle API errors\nconst handleApiError = async apiCall => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.error('API Error:', error.message);\n    throw error;\n  }\n};\n\n// Vocabulary Service\nexport const vocabularyService = {\n  // Get all vocabulary words\n  getAll: () => handleApiError(() => api.get('/vocabulary')),\n  // Get a specific vocabulary word by ID\n  getById: id => handleApiError(() => api.get(`/vocabulary/${id}`)),\n  // Create a new vocabulary word\n  create: word => handleApiError(() => api.post('/vocabulary', word)),\n  // Update a vocabulary word\n  update: (id, word) => handleApiError(() => api.put(`/vocabulary/${id}`, word)),\n  // Delete a vocabulary word\n  delete: id => handleApiError(() => api.delete(`/vocabulary/${id}`))\n};\n\n// User Progress Service\nexport const progressService = {\n  // Get progress for a specific user\n  getProgress: userId => handleApiError(() => api.get(`/progress/user/${userId}`)),\n  // Update progress for a vocabulary word\n  updateProgress: progressData => handleApiError(() => api.post('/progress/update', progressData)),\n  // Get words due for review\n  getReviewWords: userId => handleApiError(() => api.get(`/progress/review/${userId}`))\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","withCredentials","interceptors","response","use","error","message","console","Promise","reject","handleApiError","apiCall","vocabularyService","getAll","get","getById","id","word","post","update","put","delete","progressService","getProgress","userId","updateProgress","progressData","getReviewWords"],"sources":["/Users/sonnet/Documents/4370 Web Programming/ai programming/japanese-learning-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nexport const api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.message === 'Network Error') {\n      console.error('CORS or network issue detected:', error);\n      // You can add custom handling here, like showing a user-friendly message\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to handle API errors\nconst handleApiError = async (apiCall) => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.error('API Error:', error.message);\n    throw error;\n  }\n};\n\n// Vocabulary Service\nexport const vocabularyService = {\n  // Get all vocabulary words\n  getAll: () => handleApiError(() => api.get('/vocabulary')),\n  \n  // Get a specific vocabulary word by ID\n  getById: (id) => handleApiError(() => api.get(`/vocabulary/${id}`)),\n  \n  // Create a new vocabulary word\n  create: (word) => handleApiError(() => api.post('/vocabulary', word)),\n  \n  // Update a vocabulary word\n  update: (id, word) => handleApiError(() => api.put(`/vocabulary/${id}`, word)),\n  \n  // Delete a vocabulary word\n  delete: (id) => handleApiError(() => api.delete(`/vocabulary/${id}`))\n};\n\n// User Progress Service\nexport const progressService = {\n  // Get progress for a specific user\n  getProgress: (userId) => handleApiError(() => api.get(`/progress/user/${userId}`)),\n  \n  // Update progress for a vocabulary word\n  updateProgress: (progressData) => handleApiError(() => api.post('/progress/update', progressData)),\n  \n  // Get words due for review\n  getReviewWords: (userId) => handleApiError(() => api.get(`/progress/review/${userId}`))\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC3BD,QAAQ,IAAIA,QAAQ,EACpBE,KAAK,IAAI;EACP,IAAIA,KAAK,CAACC,OAAO,KAAK,eAAe,EAAE;IACrCC,OAAO,CAACF,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD;EACF;EACA,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMK,cAAc,GAAG,MAAOC,OAAO,IAAK;EACxC,IAAI;IACF,OAAO,MAAMA,OAAO,CAAC,CAAC;EACxB,CAAC,CAAC,OAAON,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC1C,MAAMD,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAG;EAC/B;EACAC,MAAM,EAAEA,CAAA,KAAMH,cAAc,CAAC,MAAMb,GAAG,CAACiB,GAAG,CAAC,aAAa,CAAC,CAAC;EAE1D;EACAC,OAAO,EAAGC,EAAE,IAAKN,cAAc,CAAC,MAAMb,GAAG,CAACiB,GAAG,CAAC,eAAeE,EAAE,EAAE,CAAC,CAAC;EAEnE;EACAlB,MAAM,EAAGmB,IAAI,IAAKP,cAAc,CAAC,MAAMb,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAED,IAAI,CAAC,CAAC;EAErE;EACAE,MAAM,EAAEA,CAACH,EAAE,EAAEC,IAAI,KAAKP,cAAc,CAAC,MAAMb,GAAG,CAACuB,GAAG,CAAC,eAAeJ,EAAE,EAAE,EAAEC,IAAI,CAAC,CAAC;EAE9E;EACAI,MAAM,EAAGL,EAAE,IAAKN,cAAc,CAAC,MAAMb,GAAG,CAACwB,MAAM,CAAC,eAAeL,EAAE,EAAE,CAAC;AACtE,CAAC;;AAED;AACA,OAAO,MAAMM,eAAe,GAAG;EAC7B;EACAC,WAAW,EAAGC,MAAM,IAAKd,cAAc,CAAC,MAAMb,GAAG,CAACiB,GAAG,CAAC,kBAAkBU,MAAM,EAAE,CAAC,CAAC;EAElF;EACAC,cAAc,EAAGC,YAAY,IAAKhB,cAAc,CAAC,MAAMb,GAAG,CAACqB,IAAI,CAAC,kBAAkB,EAAEQ,YAAY,CAAC,CAAC;EAElG;EACAC,cAAc,EAAGH,MAAM,IAAKd,cAAc,CAAC,MAAMb,GAAG,CAACiB,GAAG,CAAC,oBAAoBU,MAAM,EAAE,CAAC;AACxF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}